// sfth/slash/handlers.js
// –í–ê–ñ–ù–û: –Ω–∏–∫–∞–∫–∏—Ö —Ç—è–∂—ë–ª—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ (–≤–æ –≤—Ä–µ–º—è require)!
// –í—Å—ë, —á—Ç–æ –º–æ–∂–µ—Ç –¥–µ—Ä–Ω—É—Ç—å Discord API –∏–ª–∏ –ë–î ‚Äî —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ run().
const { EmbedBuilder, StringSelectMenuBuilder, ActionRowBuilder } = require('discord.js');
const {
  getUser, setUser, addXP, calculateLevel, calculateXPProgress, reapplyRewardsForUser
} = require('../database/userManager');
const {
  getPromoCode, hasUserUsedPromo, isCodeExpired, markPromoCodeUsed, createPromoCode
} = require('../database/promoManager');
const { getSettings, patchSettings } = require('../database/settingsManager');
const { logAction } = require('../utils/logger');
const { checkLevelMilestone } = require('../utils/xpUtils');
// –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
// –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–Ω–∏–º–∫–∞.  –°–º. utils/backupManager.js.
const { backupDb, restoreLatest } = require('../utils/backupManager');

// –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∫–æ–º–∞–Ω–¥, —Å—Ç–∞–≤–æ–∫ –∏ –∏—Å—Ç–æ—Ä–∏–∏
const { getTeam, getAllTeams, createTeam, updateTeam, deleteTeam } = require('../utils/teamManager');
const { addBet, getBetsForTeam, clearBetsForTeam, removeBetsForUserAndTeam } = require('../utils/betManager');
const {
  addBetHistory, addTeamCreate, addTeamResult, getBetHistoryForUser, getTeamHistory
} = require('../utils/historyManager');

// –î–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º
// —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏, –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏–µ–π.  readJSON –∏ writeJSON
// –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON, –∞ path –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
// –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö.
const path = require('path');
const { readJSON, writeJSON } = require('../utils/storage');

// –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä –∫–æ–º–∞–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ /predict –∏ /teamresult, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –µ–¥–∏–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä.
const STATIC_PAIRS = [
  ['–ú–µ—Å—Å–∏', '–†–æ–Ω–∞–ª–¥—É'],
  ['–•—ç–º–∏–ª—Ç–æ–Ω', '–§–µ—Ç—Ç–µ–ª—å'],
  ['–ù–∞–¥–∞–ª—å', '–§–µ–¥–µ—Ä–µ—Ä']
];

function replyPriv(interaction, payload) {
  if (interaction.replied || interaction.deferred) {
    return interaction.followUp({ ...payload, ephemeral: true });
  }
  return interaction.reply({ ...payload, ephemeral: true });
}

// –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥ (—Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
async function fetchTagSafe(client, userId) {
  try { const u = await client.users.fetch(userId); return u.tag; }
  catch { return userId; }
}

const handlers = {
  infop: {
    adminOnly: false,
    async run(interaction) {
      const { EmbedBuilder } = require('discord.js');
      const { readJSON } = require('../utils/storage');
      // –ß–∏—Ç–∞–µ–º predictions.json –Ω–∞–ø—Ä—è–º—É—é
      const predsData = readJSON(require('path').join(__dirname, '..', 'data', 'predictions.json'), { predictions: [] });
      const allPreds = Array.isArray(predsData.predictions) ? predsData.predictions : [];
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ userId
      const userMap = {};
      for (const p of allPreds) {
        if (!userMap[p.userId]) userMap[p.userId] = [];
        userMap[p.userId].push(p);
      }
      const resultBlocks = [];
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–º–∞–Ω–¥
      const teamResults = (() => {
        try {
          const hist = readJSON(require('path').join(__dirname, '..', 'data', 'history_teams.json'), { events: [] });
          return Array.isArray(hist.events) ? hist.events.filter(e => e.type === 'result') : [];
        } catch { return []; }
      })();
      function getMatchOutcome(teamA, teamB) {
        const resA = teamResults.find(e => e.name === teamA);
        const resB = teamResults.find(e => e.name === teamB);
        if (!resA || !resB) return { outcome: null, text: '‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω', code: null };
        if (resA.result === 'draw' && resB.result === 'draw') return { outcome: 'draw', text: '‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–∏—á—å—è', code: 'draw' };
        if (resA.result === 'win' && resB.result === 'loss') return { outcome: 'team1', text: `‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ø–æ–±–µ–¥–∞ ${teamA}`, code: 'team1' };
        if (resA.result === 'loss' && resB.result === 'win') return { outcome: 'team2', text: `‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ø–æ–±–µ–¥–∞ ${teamB}`, code: 'team2' };
        return { outcome: null, text: '‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω', code: null };
      }
      for (const uid of Object.keys(userMap)) {
        const predictions = userMap[uid];
        if (!predictions || predictions.length === 0) continue;
        const tag = `<@${uid}>`;
        const lines = predictions.map((p) => {
          const date = new Date(p.ts).toLocaleString();
          const [teamA, teamB] = String(p.matchKey).split('_');
          let outcomeText = '';
          if (p.prediction === 'team1') outcomeText = `–ø–æ–±–µ–¥–∞ ${teamA}`;
          else if (p.prediction === 'team2') outcomeText = `–ø–æ–±–µ–¥–∞ ${teamB}`;
          else if (p.prediction === 'draw') outcomeText = '–Ω–∏—á—å—è';
          const matchRes = getMatchOutcome(teamA, teamB);
          let resultText = matchRes.text;
          if (matchRes.code) {
            resultText += (p.prediction === matchRes.code) ? ' (–£–ì–ê–î–ê–ù–û)' : ' (–ù–ï —É–≥–∞–¥–∞–Ω–æ)';
          }
          return `üü® [${date}] –ú–∞—Ç—á: **${teamA} vs ${teamB}** ‚Äî –ø—Ä–æ–≥–Ω–æ–∑: ${outcomeText} ${resultText}`;
        });
        resultBlocks.push({
          name: `${tag} (${uid})`,
          value: lines.join('\n')
        });
      }
      if (resultBlocks.length === 0) {
        return interaction.reply({ content: '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.', ephemeral: true });
      }
      // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º–±–µ–¥–æ–≤
      const embeds = [];
      for (let i = 0; i < resultBlocks.length; i += 5) {
        const emb = new EmbedBuilder()
          .setColor(0xf5c518)
          .setTitle('–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
          .addFields(resultBlocks.slice(i, i + 5));
        embeds.push(emb);
      }
      return interaction.reply({ embeds, ephemeral: false });
    }
  },
  top20: {
    adminOnly: false,
    async run(interaction) {
      const { ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
      const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId('top_20_xp').setLabel('—Ç–æ–ø-20').setStyle(ButtonStyle.Primary)
      );
      await interaction.reply({ content: '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ XP:', components: [row], ephemeral: true });
    }
  },
  // ---------- USER ----------
  code: {
    async run(interaction) {
      const code = interaction.options.getString('value', true).toUpperCase();
      const promo = await getPromoCode(code);
      if (!promo) return replyPriv(interaction, { content: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' });

      const userId = interaction.user.id;
      if (await hasUserUsedPromo(code, userId)) return replyPriv(interaction, { content: '‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥' });
      if (isCodeExpired(promo)) return replyPriv(interaction, { content: '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' });

      const before = await getUser(userId);
      const oldLevel = calculateLevel(before.xp || 0);
      const oldProg  = calculateXPProgress(before.xp || 0);

      let resPromo = null;
      if (promo.rewards && Number.isFinite(promo.rewards.xp)) {
        resPromo = await addXP(userId, promo.rewards.xp, 'promo');
      }
      await markPromoCodeUsed(code, userId);

      const after = await getUser(userId);
      const newLevel = calculateLevel(after.xp || 0);
      const newProg  = calculateXPProgress(after.xp || 0);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å –ø—Ä–µ–º–∏—É–º‚Äë—Å—Ç–∞—Ç—É—Å–æ–º
      await checkLevelMilestone(oldLevel, newLevel, interaction.user, interaction.guild);

      const xpChangeStr = resPromo
        ? `${resPromo.oldXPProgress?.progress || '0/100'} ‚Üí ${resPromo.newXPProgress?.progress || '0/100'}`
        : `${oldProg.progress} ‚Üí ${newProg.progress}`;

      await logAction('promo', interaction.guild, {
        user: { id: userId, tag: interaction.user.tag },
        code,
        gainedXp: resPromo ? resPromo.xpGained : 0,
        xpBase:   resPromo ? resPromo.xpBase   : 0,
        oldLevel,
        newLevel,
        xpChange: xpChangeStr
      });

      // –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–µ–ª—å—Ç—ã –Ω–∞–≥—Ä–∞–¥
      const diffDouble = (after.doubleTokens || 0) - (before.doubleTokens || 0);
      const diffRaffle = (after.rafflePoints || 0) - (before.rafflePoints || 0);
      const diffInvites = (after.invites || 0) - (before.invites || 0);
      const diffPacks = (after.cardPacks || 0) - (before.cardPacks || 0);
      const tgt = { id: userId, tag: interaction.user.tag };
      if (diffDouble > 0) await logAction('bpReward', interaction.guild, { user: tgt, amount: diffDouble, rewardType: 'doubleTokens', level: newLevel });
      if (diffRaffle > 0) await logAction('bpReward', interaction.guild, { user: tgt, amount: diffRaffle,  rewardType: 'rafflePoints', level: newLevel });
      if (diffInvites > 0) await logAction('bpReward', interaction.guild, { user: tgt, amount: diffInvites,  rewardType: 'invites',      level: newLevel });
      if (diffPacks  > 0) await logAction('bpReward', interaction.guild, { user: tgt, amount: diffPacks,   rewardType: 'cardPacks',   level: newLevel });

      return replyPriv(interaction, { content: `‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç: +${resPromo ? resPromo.xpGained : 0} XP` });
    }
  },

  usedd: {
    async run(interaction) {
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ç–æ–Ω–æ–≤ Double-Down, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
      const tokens = interaction.options.getInteger('tokens', true);
      // –ò–º—è –∫–æ–º–∞–Ω–¥—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
      const teamNameArg = interaction.options.getString('team', false);
      if (tokens !== 1 && tokens !== 2) {
        return replyPriv(interaction, { content: '‚ùå –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –∏–ª–∏ 2 –∂–µ—Ç–æ–Ω–∞.', ephemeral: true });
      }
      // DD –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã. –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
      const allTeams = getAllTeams();
      let userTeamName = null;
      for (const [tName, tObj] of Object.entries(allTeams)) {
        if (Array.isArray(tObj.members) && tObj.members.map(String).includes(String(interaction.user.id))) {
          userTeamName = tName;
          break;
        }
      }
      if (!userTeamName) {
        return replyPriv(interaction, { content: '‚ùå –ñ–µ—Ç–æ–Ω—ã Double‚ÄëDown –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥. –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.', ephemeral: true });
      }
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∏–º—è –∫–æ–º–∞–Ω–¥—ã, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (teamNameArg && teamNameArg !== userTeamName) {
          return replyPriv(interaction, { content: `‚ùå –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∂–µ—Ç–æ–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É (**${userTeamName}**).`, ephemeral: true });
      }
      const teamName = userTeamName;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DD –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–∫–Ω–∞
      const settings = await getSettings(interaction.guild.id);
      if (!settings.ddEnabled) {
        return replyPriv(interaction, { content: '‚ùå Double‚ÄëDown —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.', ephemeral: true });
      }
      const windowId = settings.ddWindowId || 0;

      const userId = interaction.user.id;
      const u = await getUser(userId);
      const balance = Number(u.doubleTokens || 0);
      if (balance < tokens) {
        return replyPriv(interaction, { content: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∂–µ—Ç–æ–Ω–æ–≤: –µ—Å—Ç—å ${balance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è ${tokens}.`, ephemeral: true });
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–∫–Ω–æ DD –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
      if (!u.ddWindow || u.ddWindow.id !== windowId) {
        u.ddWindow = { id: windowId, usedTokens: 0, betTeam: null };
      }
      // –õ–∏–º–∏—Ç –∂–µ—Ç–æ–Ω–æ–≤ –Ω–∞ –æ–∫–Ω–æ ‚Äî 2 (—Å—É–º–º–∞—Ä–Ω–æ –∑–∞ –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
      if ((u.ddWindow.usedTokens || 0) + tokens > 2) {
        const remain = Math.max(0, 2 - (u.ddWindow.usedTokens || 0));
        return replyPriv(interaction, { content: `‚ùå –õ–∏–º–∏—Ç –∂–µ—Ç–æ–Ω–æ–≤ –Ω–∞ –æ–∫–Ω–æ ‚Äî 2. –î–æ—Å—Ç—É–ø–Ω–æ: ${remain}.`, ephemeral: true });
      }
      // –ï—Å–ª–∏ —É–∂–µ –±—ã–ª–∞ —Å—Ç–∞–≤–∫–∞ –≤ —ç—Ç–æ–º –æ–∫–Ω–µ, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ —Ç—É –∂–µ –∫–æ–º–∞–Ω–¥—É
      if (u.ddWindow.betTeam && u.ddWindow.betTeam !== teamName) {
        return replyPriv(interaction, { content: `‚ùå –í —ç—Ç–æ–º –æ–∫–Ω–µ —Å—Ç–∞–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –Ω–∞ **${u.ddWindow.betTeam}**. –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å Double‚ÄëDown —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É.`, ephemeral: true });
      }

      // –°–ø–∏—Å—ã–≤–∞–µ–º –∂–µ—Ç–æ–Ω—ã
      const before = Number(u.doubleTokens || 0);
      u.doubleTokens = before - tokens;
      u.ddWindow.usedTokens = (u.ddWindow.usedTokens || 0) + tokens;
      if (!u.ddWindow.betTeam) u.ddWindow.betTeam = teamName;
      await setUser(userId, u);

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º DD-—Å—Ç–∞–≤–∫—É. –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã —ç—Ç–æ –∑–∞–ø–∏—Å—å –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞ –≤ /teamresult
      await addBet(userId, teamName, tokens);
      addBetHistory({ type: 'bet', userId, team: teamName, tokens, members: allTeams[teamName]?.members || [], xp: 0 });

      await logAction('doubleStake', interaction.guild, {
        user: { id: userId, tag: interaction.user.tag },
        tokens,
        team: teamName,
        beforeTokens: before,
        afterTokens: u.doubleTokens
      });

      return replyPriv(interaction, { content: `‚úÖ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ Double‚ÄëDown: ${tokens} –∂–µ—Ç–æ–Ω(–æ–≤) –Ω–∞ **${teamName}**. –û—Å—Ç–∞–ª–æ—Å—å –∂–µ—Ç–æ–Ω–æ–≤: ${u.doubleTokens}. (–û–∫–Ω–æ #${windowId}: ${u.ddWindow.usedTokens}/2)`, ephemeral: true });
    }
  },

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞—Ä—É –∫–æ–º–∞–Ω–¥
   * —á–µ—Ä–µ–∑ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–π—Ü—É3_–π—Ü—É4") –∏ –∏—Å—Ö–æ–¥: –ø–æ–±–µ–¥–∞ –ø–µ—Ä–≤–æ–π,
   * –Ω–∏—á—å—è –∏–ª–∏ –ø–æ–±–µ–¥–∞ –≤—Ç–æ—Ä–æ–π. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–æ
   * —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–≤–æ–π –º–∞—Ç—á –∏–ª–∏ –º–∞—Ç—á, –≤ –∫–æ—Ç–æ—Ä–æ–º
   * —É—á–∞—Å—Ç–≤—É–µ—Ç –µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫. –ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–µ–∂–Ω–µ–µ
   * –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–æ—Ç –∂–µ –º–∞—Ç—á.
   */
  predict: {
    async run(interaction) {
      // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –±—É–¥—É—Ç undefined)
      const matchStr = interaction.options.getString('match', false)?.trim();
      const resultVal = interaction.options.getString('result', false);

      // –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–∫–Ω–æ Double‚ÄëDown –≤–∫–ª—é—á–µ–Ω–æ
      const settings = await getSettings(interaction.guild.id);
      if (!settings.ddEnabled) {
        return replyPriv(interaction, { content: '‚ùå –ü—Ä–æ–≥–Ω–æ–∑—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', ephemeral: true });
      }
      // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ª—é–±—É—é –ø–∞—Ä—É –∑–∞ –æ–∫–Ω–æ ddWindowId
      const ddWindowId = settings.ddWindowId || 0;
      const { getPredictionsForUser } = require('../utils/predictionManager');
      const userPredictions = getPredictionsForUser(String(interaction.user.id));
      if (userPredictions.find(p => p.ddWindowId === ddWindowId)) {
        return replyPriv(interaction, { content: '‚ùå –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –≤ —ç—Ç–æ–º –æ–∫–Ω–µ Double-Down. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ /ddstart.', ephemeral: true });
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –∏–∑ –Ω–∏—Ö
      const allTeams = getAllTeams();
      let userTeamName = null;
      for (const [tName, tObj] of Object.entries(allTeams)) {
        if (Array.isArray(tObj.members) && tObj.members.map(String).includes(String(interaction.user.id))) {
          userTeamName = tName;
          break;
        }
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
      const staticPairs = STATIC_PAIRS;

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –º–∞—Ç—á –∏–ª–∏ –∏—Å—Ö–æ–¥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
      if (!matchStr || !resultVal) {
        // –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑
        let availablePairs = staticPairs.slice();
        if (userTeamName) {
          // –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –º–∞—Ç—á–∏ —Å –µ–≥–æ —É—á–∞—Å—Ç–∏–µ–º
          let opponent = null;
          for (const pair of staticPairs) {
            if (pair.includes(userTeamName)) {
              opponent = pair[0] === userTeamName ? pair[1] : pair[0];
              break;
            }
          }
          availablePairs = staticPairs.filter((pair) => {
            return !pair.includes(userTeamName) && !(opponent && pair.includes(opponent));
          });
        }
        if (availablePairs.length === 0) {
          return replyPriv(interaction, { content: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.', components: [] });
        }
        const menuOptions = availablePairs.map((pair) => {
          return { label: `${pair[0]} vs ${pair[1]}`, value: `${pair[0]}_${pair[1]}` };
        });
        const select = new StringSelectMenuBuilder()
          .setCustomId(`predict_match_select:${interaction.user.id}`)
          .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞')
          .addOptions(menuOptions);
        const row = new ActionRowBuilder().addComponents(select);
        return replyPriv(interaction, { content: '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:', components: [row] });
      }
      // –†–∞–∑–±–∏–≤–∞–µ–º matchKey –Ω–∞ –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ —Å–∏–º–≤–æ–ª—É '_'
      const parts = matchStr.split('_').map((s) => s.trim()).filter(Boolean);
      if (parts.length !== 2) {
        return replyPriv(interaction, { content: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–∞—Ç—á–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç ¬´–∫–æ–º–∞–Ω–¥–∞1_–∫–æ–º–∞–Ω–¥–∞2¬ª.', ephemeral: true });
      }
      const [team1, team2] = parts;
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      if (!['team1', 'team2', 'draw'].includes(resultVal)) {
        return replyPriv(interaction, { content: '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏—Å—Ö–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ team1, team2 –∏–ª–∏ draw.', ephemeral: true });
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á —Å —É—á–∞—Å—Ç–∏–µ–º —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã
      if (userTeamName && (userTeamName === team1 || userTeamName === team2)) {
        return replyPriv(interaction, { content: '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á —Å —É—á–∞—Å—Ç–∏–µ–º –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.',
                                          ephemeral: true });
      }
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á, –≥–¥–µ –∏–≥—Ä–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫
      if (userTeamName) {
        for (const pair of staticPairs) {
          if (pair.includes(userTeamName)) {
            const opponent = pair[0] === userTeamName ? pair[1] : pair[0];
            if (opponent === team1 || opponent === team2) {
              return replyPriv(interaction, { content: '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á, –≥–¥–µ –∏–≥—Ä–∞—é—Ç –≤–∞—à–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∏.',
                                            ephemeral: true });
            }
          }
        }
      }
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±–µ –∫–æ–º–∞–Ω–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      const t1 = getTeam(team1);
      const t2 = getTeam(team2);
      if (!t1 || !t2) {
        return replyPriv(interaction, { content: `‚ùå –û–¥–Ω–∞ –∏–ª–∏ –æ–±–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π.`, ephemeral: true });
      }
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è –æ–±–æ–∏—Ö –∫–æ–º–∞–Ω–¥ –µ—â—ë –Ω–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      if (t1.lastResult || t2.lastResult) {
        return replyPriv(interaction, { content: '‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞ —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≥–Ω–æ–∑—ã –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.', ephemeral: true });
      }
      // –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á –º–∞—Ç—á–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ—Ä—è–¥–æ–∫ –∫–æ–º–∞–Ω–¥ –±—ã–ª —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω (–ø–æ –∏–º–µ–Ω–∏)
      const sorted = [team1, team2].sort((a, b) => a.localeCompare(b));
      const matchKey = `${sorted[0]}_${sorted[1]}`;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–ª–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á
      // (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç—á –Ω–µ –Ω—É–∂–Ω–∞ ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –æ–∫–Ω—É)
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Å ddWindowId
      addPrediction(interaction.user.id, matchKey, resultVal, ddWindowId);
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ, –≤–∫–ª—é—á–∞—è —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏—Å—Ö–æ–¥
      // –î–ª—è –ª–æ–≥–∞: –ø—Ä–æ–≥–Ω–æ–∑ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∞ –Ω–µ team1/team2
      let logOutcomeDesc;
      if (resultVal === 'team1') logOutcomeDesc = team1;
      else if (resultVal === 'team2') logOutcomeDesc = team2;
      else logOutcomeDesc = '–Ω–∏—á—å—è';
      await logAction('predictionAdd', interaction.guild, {
        user: { id: interaction.user.id, tag: interaction.user.tag },
        match: matchKey,
        teams: [sorted[0], sorted[1]],
        prediction: logOutcomeDesc
      });
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏—Å—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–ª—è –ª–æ–≥–∞
      let outcomeDesc;
      if (resultVal === 'team1') outcomeDesc = `–ø–æ–±–µ–¥–∞ ${team1}`;
      else if (resultVal === 'team2') outcomeDesc = `–ø–æ–±–µ–¥–∞ ${team2}`;
      else outcomeDesc = '–Ω–∏—á—å—è';
      return replyPriv(interaction, { content: `‚úÖ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–Ω—è—Ç: –º–∞—Ç—á **${sorted[0]}** vs **${sorted[1]}**, –∏—Å—Ö–æ–¥ **${outcomeDesc}**.`, ephemeral: true });
    }
  },

  bp: {
    adminOnly: false,
    async run(interaction) {
      const battlepass = require('../commands/battlepass'); // –ª–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç
      const u = await getUser(interaction.user.id);
      const level = calculateLevel(u.xp || 0);
      const page = battlepass.defaultLevelToPage(level);
      const embed = battlepass.makeEmbed({
        user: interaction.user,
        page,
        level,
        xp: u.xp || 0,
        invites: u.invites || 0,
        doubleTokens: u.doubleTokens || 0,
        rafflePoints: u.rafflePoints || 0,
        cardPacks: u.cardPacks || 0,
        isPremium: !!u.premium
      });
      const { ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
      const pageButtons = battlepass.makePageButtons(page);
      // –ö–Ω–æ–ø–∫–∞ '—Ç–æ–ø-20'
      const topRow = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId('top_20_xp').setLabel('—Ç–æ–ø-20').setStyle(ButtonStyle.Primary)
      );
      await interaction.deferReply({ ephemeral: true });
      let files;
      try {
        const imgAtt = await battlepass.generateImageAttachment(u, page, level, u.xp || 0);
        if (imgAtt) { embed.setImage(`attachment://${imgAtt.name}`); files = [imgAtt]; }
      } catch(e) { console.error('[BP overlay error]', e?.message || e); }
      // –¢–æ–ª—å–∫–æ editReply, –±–µ–∑ replyPriv
      await interaction.editReply({ embeds: [embed], components: [topRow, ...pageButtons], files });
      return;
    }
  },

  // ---------- ADMIN ----------
  bpstat: {
    adminOnly: true,
    async run(interaction) {
      const target = interaction.options.getUser('user') || interaction.user;
      const u = await getUser(target.id);
      const level = calculateLevel(u.xp || 0);
      const progress = calculateXPProgress(u.xp || 0);

      const emb = new EmbedBuilder()
        .setColor(u.premium ? 0xffd700 : 0x2b6cb0)
        .setTitle(`BP-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî ${target.tag}`)
        .addFields(
          { name: '–£—Ä–æ–≤–µ–Ω—å', value: String(level), inline: true },
          { name: 'XP', value: String(u.xp || 0), inline: true },
          { name: '–ü—Ä–æ–≥—Ä–µ—Å—Å', value: progress.progress, inline: true },
          { name: 'DD-–∂–µ—Ç–æ–Ω—ã', value: String(u.doubleTokens || 0), inline: true },
          { name: '–û—á–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞', value: String(u.rafflePoints || 0), inline: true },
          { name: '–ò–Ω–≤–∞–π—Ç—ã', value: String(u.invites || 0), inline: true },
          { name: '–ü–∞–∫–∏ –∫–∞—Ä—Ç', value: String(u.cardPacks || 0), inline: true },
          { name: '–ü—Ä–µ–º–∏—É–º', value: u.premium ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ—Ç', inline: true }
        )
        .setFooter({ text: `ID: ${target.id}` });

      return replyPriv(interaction, { embeds: [emb] });
    }
  },

  setcode: {
    adminOnly: true,
    async run(interaction) {
      const codeStr  = interaction.options.getString('code', true).toUpperCase();
      const minutes  = interaction.options.getInteger('minutes', true);
      const xpAmount = interaction.options.getInteger('xp', true);
      const limit    = interaction.options.getInteger('limit', false) || 0;
      const expiresAt = new Date(Date.now() + minutes * 60000);
      await createPromoCode(codeStr, { xp: xpAmount }, expiresAt, limit);
      await logAction('promo', interaction.guild, {
        admin: { id: interaction.user.id, tag: interaction.user.tag },
        code: codeStr, gainedXp: xpAmount, limit, minutes
      });
      return replyPriv(interaction, { content: `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ \`${codeStr}\` —Å–æ–∑–¥–∞–Ω (+${xpAmount} XP, ${minutes} –º–∏–Ω., –ª–∏–º–∏—Ç ${limit || '‚àû'})` });
    }
  },

  xp: {
    adminOnly: true,
    async run(interaction) {
      const user   = interaction.options.getUser('user', true);
      const amount = interaction.options.getInteger('amount', true);
      const before = await getUser(user.id);
      const res    = await addXP(user.id, amount, 'manual_admin');
      const after  = await getUser(user.id);

  // –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 50/98/100 —É—Ä–æ–≤–Ω—è —Å –ø—Ä–µ–º–∏—É–º
  // (—É–±—Ä–∞–Ω–æ –¥–≤–æ–π–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥, –µ—Å–ª–∏ addXP —É–∂–µ —Å–∞–º–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç)
  const xpChangeStr = `${res.oldXPProgress?.progress || '0/100'} ‚Üí ${res.newXPProgress?.progress || '0/100'}`;

      await logAction('xpAdd', interaction.guild, {
        admin: { id: interaction.user.id, tag: interaction.user.tag },
        target: { id: user.id, tag: user.tag },
        amount: res.xpGained, gainedXp: res.xpGained, xpBase: res.xpBase,
        oldLevel: res.oldLevel, newLevel: res.newLevel, xpChange: xpChangeStr
      });

      const diffDouble = (after.doubleTokens || 0) - (before.doubleTokens || 0);
      const diffRaffle = (after.rafflePoints || 0) - (before.rafflePoints || 0);
      const diffInvites = (after.invites || 0) - (before.invites || 0);
      const diffPacks = (after.cardPacks || 0) - (before.cardPacks || 0);
      const lvlNew = res.newLevel;
      const tgt = { id: user.id, tag: user.tag };
      if (diffDouble > 0) await logAction('bpReward', interaction.guild, { user: tgt, amount: diffDouble, rewardType: 'doubleTokens', level: lvlNew });
      if (diffRaffle > 0) await logAction('bpReward', interaction.guild, { user: tgt, amount: diffRaffle,  rewardType: 'rafflePoints', level: lvlNew });
      if (diffInvites > 0) await logAction('bpReward', interaction.guild, { user: tgt, amount: diffInvites,  rewardType: 'invites',      level: lvlNew });
      if (diffPacks  > 0) await logAction('bpReward', interaction.guild, { user: tgt, amount: diffPacks,   rewardType: 'cardPacks',   level: lvlNew });

      return replyPriv(interaction, { content: `‚úÖ <@${user.id}> +${res.xpGained} XP (—É—Ä–æ–≤–µ–Ω—å ${res.oldLevel} ‚Üí ${res.newLevel})` });
    }
  },

  xpset: {
    adminOnly: true,
    async run(interaction) {
      const user   = interaction.options.getUser('user', true);
      const amount = interaction.options.getInteger('amount', true);
      const u = await getUser(user.id);
      const oldXp = u.xp || 0;
      const oldLevel = calculateLevel(oldXp);
      const oldProg  = calculateXPProgress(oldXp);
      u.xp = amount;
      await setUser(user.id, u);
      const newLevel = calculateLevel(u.xp || 0);
      const newProg  = calculateXPProgress(u.xp || 0);
      const xpChangeStr = `${oldProg.progress} ‚Üí ${newProg.progress}`;
      await logAction('xpSet', interaction.guild, {
        admin: { id: interaction.user.id, tag: interaction.user.tag },
        target: { id: user.id, tag: user.tag },
        value: amount, oldLevel, newLevel, xpChange: xpChangeStr
      });
      return replyPriv(interaction, { content: `üõ†Ô∏è XP –¥–ª—è <@${user.id}> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${amount} (—É—Ä–æ–≤–µ–Ω—å ${oldLevel} ‚Üí ${newLevel})` });
    }
  },

  xpinvite: {
    adminOnly: true,
    async run(interaction) {
      const inviter = interaction.options.getUser('user', true);
      const added   = interaction.options.getUser('added', false);
      // –î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è XP
      const before = await getUser(inviter.id);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≥–ª–∞—à–∞–ª –ª–∏ —É–∂–µ inviter —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let u = await getUser(inviter.id);
      if (added) {
        // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        u.invitedUsers = Array.isArray(u.invitedUsers) ? u.invitedUsers : [];
        const already = u.invitedUsers.map(String).includes(String(added.id));
        if (already) {
          return replyPriv(interaction, { content: `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@${inviter.id}> —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª(–∞) <@${added.id}>. –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–µ–ª—å–∑—è.`, ephemeral: true });
        }
        u.invitedUsers.push(String(added.id));
      }
      // –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –∏–Ω–≤–∞–π—Ç (100 XP)
      const res = await addXP(inviter.id, 100, 'invite');
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
      await checkLevelMilestone(res.oldLevel, res.newLevel, inviter, interaction.guild);
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–∞–π—Ç–æ–≤
      u.invites = (u.invites || 0) + 1;
      await setUser(inviter.id, u);
      const after = await getUser(inviter.id);
      const xpChangeStr = `${res.oldXPProgress?.progress || '0/100'} ‚Üí ${res.newXPProgress?.progress || '0/100'}`;
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–¥–∞—á—É XP –∏ –∏–Ω–≤–∞–π—Ç–∞
      await logAction('xpInvite', interaction.guild, {
        admin: { id: interaction.user.id, tag: interaction.user.tag },
        target: { id: inviter.id, tag: inviter.tag },
        gainedXp: res.xpGained, xpBase: res.xpBase, xpChange: xpChangeStr
      });
      // –õ–æ–≥–∏ –¥–ª—è –Ω–∞–≥—Ä–∞–¥ BP
      const diffDouble = (after.doubleTokens || 0) - (before.doubleTokens || 0);
      const diffRaffle = (after.rafflePoints || 0) - (before.rafflePoints || 0);
      const diffInvites = (after.invites || 0) - (before.invites || 0);
      const diffPacks   = (after.cardPacks || 0) - (before.cardPacks || 0);
      const lvlNew = calculateLevel(after.xp || 0);
      const tgt = { id: inviter.id, tag: inviter.tag };
      if (diffDouble > 0) await logAction('bpReward', interaction.guild, { user: tgt, amount: diffDouble, rewardType: 'doubleTokens', level: lvlNew });
      if (diffRaffle > 0) await logAction('bpReward', interaction.guild, { user: tgt, amount: diffRaffle,  rewardType: 'rafflePoints', level: lvlNew });
      // diffInvites > 1 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–º–∏–º–æ 1 –∏–Ω–≤–∞–π—Ç–∞, –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏–ª –µ—â—ë –∏ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —É—Ä–æ–≤–µ–Ω—å
      if (diffInvites > 1) {
        const rewardedInvites = diffInvites - 1;
        if (rewardedInvites > 0) await logAction('bpReward', interaction.guild, { user: tgt, amount: rewardedInvites, rewardType: 'invites', level: lvlNew });
      }
      if (diffPacks  > 0) await logAction('bpReward', interaction.guild, { user: tgt, amount: diffPacks,   rewardType: 'cardPacks', level: lvlNew });
      return replyPriv(interaction, { content: `‚úÖ <@${inviter.id}>: +${res.xpGained} XP –∏ +1 invite.` });
    }
  },

  // –†—É—á–Ω—ã–µ —Å–µ—Ç—Ç–µ—Ä—ã
  gpset: {
    adminOnly: true,
    async run(interaction) {
      const user = interaction.options.getUser('user', true);
      const points = interaction.options.getInteger('points', true);
      const u = await getUser(user.id);
      u.rafflePoints = points;
      await setUser(user.id, u);
      await logAction('raffleSet', interaction.guild, { admin: { id: interaction.user.id, tag: interaction.user.tag }, target: { id: user.id, tag: user.tag }, points });
      return replyPriv(interaction, { content: `üéüÔ∏è –£ <@${user.id}> —Ç–µ–ø–µ—Ä—å ${points} –æ—á–∫–æ–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.` });
    }
  },
  ddset: {
    adminOnly: true,
    async run(interaction) {
      const user = interaction.options.getUser('user', true);
      const amount = interaction.options.getInteger('amount', true);
      const u = await getUser(user.id);
      u.doubleTokens = amount;
      await setUser(user.id, u);
      await logAction('doubleStakeTokensSet', interaction.guild, { admin: { id: interaction.user.id, tag: interaction.user.tag }, target: { id: user.id, tag: user.tag }, amount });
      return replyPriv(interaction, { content: `üéØ –£ <@${user.id}> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ DD-–∂–µ—Ç–æ–Ω–æ–≤: ${amount}.` });
    }
  },
  invset: {
    adminOnly: true,
    async run(interaction) {
      const user = interaction.options.getUser('user', true);
      const amount = interaction.options.getInteger('amount', true);
      const u = await getUser(user.id);
      u.invites = amount;
      await setUser(user.id, u);
      await logAction('invitesSet', interaction.guild, { admin: { id: interaction.user.id, tag: interaction.user.tag }, target: { id: user.id, tag: user.tag }, amount });
      return replyPriv(interaction, { content: `ü§ù –£ <@${user.id}> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–Ω–≤–∞–π—Ç–æ–≤: ${amount}.` });
    }
  },
  cpset: {
    adminOnly: true,
    async run(interaction) {
      const user = interaction.options.getUser('user', true);
      const amount = interaction.options.getInteger('amount', true);
      const u = await getUser(user.id);
      u.cardPacks = amount;
      await setUser(user.id, u);
      await logAction('cardPacksSet', interaction.guild, { admin: { id: interaction.user.id, tag: interaction.user.tag }, target: { id: user.id, tag: user.tag }, amount });
      return replyPriv(interaction, { content: `üÉè –£ <@${user.id}> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–∞–∫–æ–≤ –∫–∞—Ä—Ç: ${amount}.` });
    }
  },

  bpreapply: {
    adminOnly: true,
    async run(interaction) {
      const user = interaction.options.getUser('user', true);
      const includeXP = !!interaction.options.getBoolean('includexp', false);
      const res = await reapplyRewardsForUser(user.id, includeXP);
      await logAction('bpReapply', interaction.guild, { admin: { id: interaction.user.id, tag: interaction.user.tag }, target: { id: user.id, tag: user.tag }, level: res.level, deltas: JSON.stringify(res.deltas) });
      return replyPriv(interaction, { content: `üîÅ –î–æ–Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è <@${user.id}> (—É—Ä–æ–≤–µ–Ω—å ${res.level}).` });
    }
  },

  userreset: {
    adminOnly: true,
    async run(interaction) {
      const user = interaction.options.getUser('user', true);
      const userId = user.id;
      // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è XP, –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–º–∏—É–º‚Äë—Å—Ç–∞—Ç—É—Å.
      const resetData = {
        xp: 0,
        invites: 0,
        rafflePoints: 0,
        doubleTokens: 0,
        cardPacks: 0,
        premium: false,
        premium_since: null,
        matchesPlayed: 0,
        winsInRow: 0,
        achievements: { ninePlayed: false, twelvePlayed: false, fourWinsStreak: false }
      };
      // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏; –ø—Ä–∏ —ç—Ç–æ–º
      // —Å–≤–æ–π—Å—Ç–≤–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ resetData, –±—É–¥—É—Ç –≤–∑—è—Ç—ã –∏–∑ DEFAULT_USER (id –∏ –¥—Ä.).
      await setUser(userId, resetData);

      // –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã–µ: –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏, –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫.
      try {
        // bets.json: —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const betsFile   = path.join(__dirname, '..', 'data', 'bets.json');
        const betsData   = readJSON(betsFile, { bets: [] });
        if (Array.isArray(betsData.bets)) {
          betsData.bets = betsData.bets.filter((b) => String(b.userId) !== String(userId));
          writeJSON(betsFile, betsData);
        }
        // predictions.json: —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const predFile   = path.join(__dirname, '..', 'data', 'predictions.json');
        const predData   = readJSON(predFile, { predictions: [] });
        if (Array.isArray(predData.predictions)) {
          predData.predictions = predData.predictions.filter((p) => String(p.userId) !== String(userId));
          writeJSON(predFile, predData);
        }
        // history_bets.json: —É–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const histFile   = path.join(__dirname, '..', 'data', 'history_bets.json');
        const histData   = readJSON(histFile, { events: [] });
        if (Array.isArray(histData.events)) {
          histData.events = histData.events.filter((e) => String(e.userId) !== String(userId));
          writeJSON(histFile, histData);
        }
      } catch (e) {
        console.error('[userreset] error wiping user data', e);
      }
      await logAction('userReset', interaction.guild, {
        admin: { id: interaction.user.id, tag: interaction.user.tag },
        target: { id: userId, tag: user.tag }
      });
      return replyPriv(interaction, { content: `üßπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@${userId}> –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω—É–ª—ë–Ω.` });
    }
  },

  dbreset: {
    adminOnly: true,
    async run(interaction) {
      const confirm = interaction.options.getBoolean('confirm', true);
      if (!confirm) return replyPriv(interaction, { content: '–û—Ç–º–µ–Ω–∞.' });

      let wiped = 0;
      try {
        const db = global.db;
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
        if (db?.list) {
          const entries = await db.list('user_');
          for (const k of Object.keys(entries)) {
            await db.delete(k);
            wiped++;
          }
        }
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª teams.json –ø—É—Å—Ç—ã–º –æ–±—ä–µ–∫—Ç–æ–º
        {
          const teamsFile = path.join(__dirname, '..', 'data', 'teams.json');
          writeJSON(teamsFile, { teams: {} });
        }
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
        {
          const { clearAllBets } = require('../utils/betManager');
          clearAllBets();
        }
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
        {
          const { clearAllPredictions } = require('../utils/predictionManager');
          clearAllPredictions();
        }
        // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫ –∏ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥
        {
          const betsHistFile = path.join(__dirname, '..', 'data', 'history_bets.json');
          writeJSON(betsHistFile, { events: [] });
          const teamsHistFile = path.join(__dirname, '..', 'data', 'history_teams.json');
          writeJSON(teamsHistFile, { events: [] });
        }
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Double‚ÄëDown: –≤—ã–∫–ª—é—á–∞–µ–º –æ–∫–Ω–æ –∏ —Å—Ç–∞–≤–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ 0
        try {
          await patchSettings(interaction.guild.id, { ddEnabled: false, ddWindowId: 0 });
        } catch {}
      } catch (e) {
        console.error('[dbreset/full-reset]', e);
      }
      await logAction('dbReset', interaction.guild, {
        admin: { id: interaction.user.id, tag: interaction.user.tag },
        value: `users=${wiped}`
      });
      return replyPriv(interaction, { content: `üí£ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${wiped}.` });
    }
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é.  –•–æ—Ç—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
   * –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∏–Ω–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ç—Ä–µ–±—É–µ—Ç—Å—è
   * —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.  –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
   * –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è.
   */
  backup: {
    adminOnly: true,
    async run(interaction) {
      try {
        await interaction.deferReply({ flags: 64 /* MessageFlags.Ephemeral */ });
      } catch {}
      try {
        const filePath = await backupDb();
        await logAction('dbBackup', interaction.guild, {
          admin: { id: interaction.user.id, tag: interaction.user.tag },
          file: filePath
        });
        return replyPriv(interaction, { content: `üóÇÔ∏è –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${filePath}` });
      } catch (e) {
        console.error('[backup] failed to create backup', e);
        return replyPriv(interaction, { content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.' });
      }
    }
  },

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∞–º–æ–π —Å–≤–µ–∂–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.  –≠—Ç–∞
   * –æ–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –±–∞–∑—ã (`data/db.json`) –¥–∞–Ω–Ω—ã–º–∏
   * –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–Ω–∏–º–∫–∞.  –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã: –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ
   * –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–ª—å–∑—è.  –û—Ç—á—ë—Ç –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –ª–æ–≥–∏.
   */
  restore: {
    adminOnly: true,
    async run(interaction) {
      try {
        await interaction.deferReply({ flags: 64 /* MessageFlags.Ephemeral */ });
      } catch {}
      try {
        const filePath = await restoreLatest();
        await logAction('dbRestore', interaction.guild, {
          admin: { id: interaction.user.id, tag: interaction.user.tag },
          file: filePath
        });
        return replyPriv(interaction, { content: `üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑: ${filePath}` });
      } catch (e) {
        console.error('[restore] failed to restore backup', e);
        return replyPriv(interaction, { content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.' });
      }
    }
  },

  ddstart: {
    adminOnly: true,
    async run(interaction) {
      // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ Double‚ÄëDown –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏
      // –∑–∞–Ω–æ–≤–æ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏. –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ.
      const settings = await getSettings(interaction.guild.id);
      const nextId = (settings.ddWindowId || 0) + 1;
      // –°–±—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
      try {
        const { clearAllPredictions } = require('../utils/predictionManager');
        clearAllPredictions();
      } catch (e) {
        console.error('[ddstart] error clearing predictions', e);
      }
      await patchSettings(interaction.guild.id, { ddEnabled: true, ddWindowId: nextId });
      await logAction('doubleStakeWindow', interaction.guild, { admin: { id: interaction.user.id, tag: interaction.user.tag }, enabled: true, value: `windowId=${nextId}` });
      return interaction.reply({ content: `‚úÖ –û–∫–Ω–æ Double-Down –æ—Ç–∫—Ä—ã—Ç–æ (ID: ${nextId}).`, ephemeral: true });
    }
  },

  ddstop: {
    adminOnly: true,
    async run(interaction) {
      await patchSettings(interaction.guild.id, { ddEnabled: false });
      await logAction('doubleStakeWindow', interaction.guild, { admin: { id: interaction.user.id, tag: interaction.user.tag }, enabled: false });
      return replyPriv(interaction, { content: 'üõë –û–∫–Ω–æ Double-Down –∑–∞–∫—Ä—ã—Ç–æ.' });
    }
  },

  setlog: {
    adminOnly: true,
    async run(interaction) {
      const ch = interaction.options.getChannel('channel', true);
      await patchSettings(interaction.guild.id, { logChannelId: ch.id });
      return replyPriv(interaction, { content: `‚úÖ –õ–æ–≥-–∫–∞–Ω–∞–ª: <#${ch.id}>` });
    }
  },

 premiumon: {
    adminOnly: true,
    async run(interaction) {
      const user = interaction.options.getUser('user', true);
      const u = await getUser(user.id);
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
      if (u && u.premium) {
        return replyPriv(interaction, { content: `‚ùå –£ <@${user.id}> —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º.` });
      }
      // –í–∫–ª—é—á–∞–µ–º –ø—Ä–µ–º–∏—É–º –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–∞—Ç—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
      u.premium = true;
      u.premium_since = new Date().toISOString();
      await setUser(user.id, u);
      // –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã.  XP‚Äë–Ω–∞–≥—Ä–∞–¥—ã –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è.
      try {
        await reapplyRewardsForUser(user.id, false);
      } catch (e) {
        console.error('[premiumon] reapplyRewardsForUser', e);
      }
      await logAction('premiumChange', interaction.guild, {
        admin: { id: interaction.user.id, tag: interaction.user.tag },
        target: { id: user.id, tag: user.tag },
        premium: true
      });
      return replyPriv(interaction, { content: `‚≠ê –ü—Ä–µ–º–∏—É–º –≤–∫–ª—é—á—ë–Ω –¥–ª—è <@${user.id}>` });
    }
  },

  premiumoff: {
    adminOnly: true,
    async run(interaction) {
      const user = interaction.options.getUser('user', true);
      const u = await getUser(user.id);
      // –ï—Å–ª–∏ –ø—Ä–µ–º–∏—É–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –≤—ã–¥–∞—ë–º –æ—à–∏–±–∫—É
      if (!u || !u.premium) {
        return replyPriv(interaction, { content: `‚ùå –£ <@${user.id}> –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞.` });
      }
      // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–º–∏—É–º. –ú–æ–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
      u.premium = false;
      u.premium_since = null;
      await setUser(user.id, u);
      await logAction('premiumChange', interaction.guild, {
        admin: { id: interaction.user.id, tag: interaction.user.tag },
        target: { id: user.id, tag: user.tag },
        premium: false
      });
      return replyPriv(interaction, { content: `üÜì –ü—Ä–µ–º–∏—É–º –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è <@${user.id}>` });
    }
  },

  /**
   * –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏–º–µ—é—â–∏—Ö –ø—Ä–µ–º–∏—É–º‚Äë—Å—Ç–∞—Ç—É—Å.
   * –°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (user_*) –∏ –≤–∫–ª—é—á–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
   * –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–µ–≥ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω).  –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ
   * –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
   */
  usersprem: {
    adminOnly: true,
    async run(interaction) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
      const db = global.db;
      let entries = {};
      try {
        if (db?.list) entries = await db.list('user_');
      } catch (e) {
        console.error('[usersprem] list error:', e);
      }
      const ids = [];
      for (const key of Object.keys(entries || {})) {
        const udata = entries[key];
        if (udata && udata.premium) {
          const uid = udata.id || String(key).replace(/^user_/, '');
          ids.push(String(uid));
        }
      }
      const lines = [];
      for (const uid of ids) {
        try {
          const tag = await fetchTagSafe(interaction.client, uid);
          if (tag) {
            lines.push(`‚≠ê ${tag} (<@${uid}>)`);
          } else {
            lines.push(`‚≠ê <@${uid}>`);
          }
        } catch {
          lines.push(`‚≠ê <@${uid}>`);
        }
      }
      const content = lines.length
        ? '–°–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º‚Äë–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n' + lines.join('\n')
        : '–ü—Ä–µ–º–∏—É–º‚Äë–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      return replyPriv(interaction, { content });
    }
  },

  // ---------- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ ----------
  teamcreate: {
    adminOnly: true,
    async run(interaction) {
      const name = interaction.options.getString('name', true)?.trim();
      const members = [];
      for (let i = 1; i <= 5; i++) {
        const optName = `player${i}`;
        const user = interaction.options.getUser(optName, true);
        members.push(user.id);
      }
      if (new Set(members).size !== members.length) {
        return replyPriv(interaction, { content: '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.' });
      }
      const all = getAllTeams();
      const existsByName = Object.keys(all).some((n) => n.toLowerCase() === name.toLowerCase());
      if (existsByName) return replyPriv(interaction, { content: `‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ —Å –∏–º–µ–Ω–µ–º **${name}** —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.` });

      const conflicts = [];
      for (const [tname, t] of Object.entries(all)) {
        const inTeam = new Set((t.members || []).map(String));
        for (const m of members) if (inTeam.has(String(m))) conflicts.push({ member: m, team: tname });
      }
      if (conflicts.length) {
        const pretty = conflicts.map((c) => `<@${c.member}> –≤ ¬´${c.team}¬ª`).join(', ');
        return replyPriv(interaction, { content: `‚ùå –û—à–∏–±–∫–∞: —Å–ª–µ–¥—É—é—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–∂–µ —Å–æ—Å—Ç–æ—è—Ç –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö: ${pretty}` });
      }

      const norm = (arr) => [...new Set(arr.map(String))].sort().join('|');
      const sig = norm(members);
      for (const t of Object.values(all)) {
        if (norm(t.members || []) === sig) {
          return replyPriv(interaction, { content: '‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –∂–µ —Å–æ—Å—Ç–∞–≤–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.' });
        }
      }

      // –ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–µ–ª–∞–ª –ª–∏ –∫—Ç–æ-—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.
      // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª Double‚ÄëDown –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∂–µ—Ç–æ–Ω—ã –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É.
      for (const memberId of members) {
        try {
          const mUser = await getUser(memberId);
          if (mUser && mUser.ddWindow && mUser.ddWindow.betTeam === name) {
            const used = Number(mUser.ddWindow.usedTokens || 0);
            if (used > 0) {
              mUser.doubleTokens = Number(mUser.doubleTokens || 0) + used;
              mUser.ddWindow.usedTokens = 0;
              mUser.ddWindow.betTeam = null;
              await setUser(memberId, mUser);
              removeBetsForUserAndTeam(memberId, name);
              const memberTag = await fetchTagSafe(interaction.client, memberId);
              await logAction('doubleRefund', interaction.guild, {
                user: { id: memberId, tag: memberTag },
                team: name,
                tokens: used
              });
            }
          }
        } catch (e) {
          console.error('[teamcreate/refund]', e);
        }
      }

      const created = createTeam(name, members);
      if (!created) return replyPriv(interaction, { content: `‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ **${name}** —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.` });

      addTeamCreate(name, members);
      // –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –ª–æ–≥: –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–∏–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const memberTags = await Promise.all(members.map((id) => fetchTagSafe(interaction.client, id)));
      await logAction('teamCreate', interaction.guild, {
        admin: { id: interaction.user.id, tag: interaction.user.tag },
        name,
        membersList: memberTags
      });

      const mentions = members.map((id) => `<@${id}>`).join(', ');
      return replyPriv(interaction, { content: `‚úÖ –ö–æ–º–∞–Ω–¥–∞ **${name}** —Å–æ–∑–¥–∞–Ω–∞. –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${mentions}.` });
    }
  },

  teamchange: {
    adminOnly: true,
    async run(interaction) {
      const name = interaction.options.getString('name', true)?.trim();
      // –ü–∞—Ä–∞–º–µ—Ç—Ä old –ø–æ—Å—Ç—É–ø–∞–µ—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –∏–∑ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
      // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ old –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ `<@id>` –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ ID.
      const oldRaw = interaction.options.getString('old', true);
      let oldUserId = oldRaw;
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ –ø–∏–Ω–≥–∞ (–æ—Å—Ç–∞–≤–ª—è—è ID –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤)
      if (typeof oldRaw === 'string') {
        const match = oldRaw.match(/\d+/);
        if (match) oldUserId = match[0];
      }
      const newUser = interaction.options.getUser('new', true);
      if (String(oldUserId) === String(newUser.id)) {
        return replyPriv(interaction, { content: '‚ùå –û—à–∏–±–∫–∞: –≤—ã —É–∫–∞–∑–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.' });
      }
      const team = getTeam(name);
      if (!team) return replyPriv(interaction, { content: `‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ **${name}** –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.` });
      if (team.lastResult) return replyPriv(interaction, { content: '‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.' });

      const idx = team.members.indexOf(String(oldUserId));
      if (idx === -1) return replyPriv(interaction, { content: `‚ùå –û—à–∏–±–∫–∞: <@${oldUserId}> –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–µ **${name}**.` });
      if (team.members.includes(String(newUser.id))) return replyPriv(interaction, { content: `‚ùå –û—à–∏–±–∫–∞: <@${newUser.id}> —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–µ **${name}**.` });

      // –ü–µ—Ä–µ–¥ –∑–∞–º–µ–Ω–æ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Double‚ÄëDown –∂–µ—Ç–æ–Ω—ã, –µ—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å—Ç–∞–≤–∏–ª –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.
      try {
        const oldUser = await getUser(oldUserId);
        if (oldUser && oldUser.ddWindow && oldUser.ddWindow.betTeam === name) {
          const used = Number(oldUser.ddWindow.usedTokens || 0);
          if (used > 0) {
            oldUser.doubleTokens = Number(oldUser.doubleTokens || 0) + used;
            oldUser.ddWindow.usedTokens = 0;
            oldUser.ddWindow.betTeam = null;
            await setUser(oldUserId, oldUser);
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
            removeBetsForUserAndTeam(oldUserId, name);
            const oldTag2 = await fetchTagSafe(interaction.client, oldUserId);
            await logAction('doubleRefund', interaction.guild, {
              user: { id: oldUserId, tag: oldTag2 },
              team: name,
              tokens: used
            });
          }
        }
      } catch (e) { console.error('[teamchange/refund-old]', e); }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∂–µ—Ç–æ–Ω—ã –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É, –µ—Å–ª–∏ –æ–Ω —Ä–∞–Ω–µ–µ —Å—Ç–∞–≤–∏–ª –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É (–¥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è)
      try {
        const newUserData = await getUser(newUser.id);
        if (newUserData && newUserData.ddWindow && newUserData.ddWindow.betTeam === name) {
          const usedN = Number(newUserData.ddWindow.usedTokens || 0);
          if (usedN > 0) {
            newUserData.doubleTokens = Number(newUserData.doubleTokens || 0) + usedN;
            newUserData.ddWindow.usedTokens = 0;
            newUserData.ddWindow.betTeam = null;
            await setUser(newUser.id, newUserData);
            removeBetsForUserAndTeam(newUser.id, name);
            const newTag2 = await fetchTagSafe(interaction.client, newUser.id);
            await logAction('doubleRefund', interaction.guild, {
              user: { id: newUser.id, tag: newTag2 },
              team: name,
              tokens: usedN
            });
          }
        }
      } catch (e) { console.error('[teamchange/refund-new]', e); }

      // –ó–∞–º–µ–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
      team.members[idx] = String(newUser.id);
      updateTeam(name, { members: team.members });

      // –î–ª—è –ª–æ–≥–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const memberTags = await Promise.all(team.members.map((id) => fetchTagSafe(interaction.client, id)));
      const oldTag = await fetchTagSafe(interaction.client, oldUserId);
      const newTag = await fetchTagSafe(interaction.client, newUser.id);

      await logAction('teamChange', interaction.guild, {
        admin: { id: interaction.user.id, tag: interaction.user.tag },
        name,
        change: `${oldTag} ‚Üí ${newTag}`,
        membersList: memberTags
      });

      return replyPriv(interaction, { content: `üîÑ –í –∫–æ–º–∞–Ω–¥–µ **${name}** –∑–∞–º–µ–Ω—ë–Ω <@${oldUserId}> –Ω–∞ <@${newUser.id}>.` });
    }
  },

  teamdelete: {
    adminOnly: true,
    async run(interaction) {
      const name = interaction.options.getString('name', true)?.trim();
      const removed = deleteTeam(name);
      if (!removed) return replyPriv(interaction, { content: `‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ **${name}** –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.` });

      await logAction('teamDelete', interaction.guild, { admin: { id: interaction.user.id, tag: interaction.user.tag }, name });
      return replyPriv(interaction, { content: `üóëÔ∏è –ö–æ–º–∞–Ω–¥–∞ **${name}** —É–¥–∞–ª–µ–Ω–∞.` });
    }
  },

  teamresult: {
    adminOnly: true,
    async run(interaction) {
      const name = interaction.options.getString('name', true)?.trim();
      const result = interaction.options.getString('result', true); // win | loss | draw
      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ (—Å—Ç–∞–≤–æ–∫) –¥–ª—è –ª–æ–≥–∞
      let predictionsCount = 0;

      const team = getTeam(name);
      if (!team) return replyPriv(interaction, { content: `‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ **${name}** –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.` });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
      updateTeam(name, { lastResult: result });

      // ---- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –∏—Å—Ö–æ–¥ –º–∞—Ç—á–∞ ----
      try {
        const { getPredictionsForMatch, clearPredictionsForMatch } = require('../utils/predictionManager');
        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞—Ç—á–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ, —á—Ç–æ –∏ –≤ predict)
        let matchPair = null;
        for (const p of STATIC_PAIRS) {
          if (p.includes(name)) { matchPair = p; break; }
        }
          if (matchPair) {
            const sorted = [...matchPair].sort((a, b) => a.localeCompare(b));
            const matchKey = `${sorted[0]}_${sorted[1]}`;
            const preds = getPredictionsForMatch(matchKey);
            predictionsCount = preds.length;
            if (preds && preds.length > 0) {
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏—Å—Ö–æ–¥ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ sorted: team1, team2 –∏–ª–∏ draw
              let actualOutcome;
              if (result === 'draw') {
                actualOutcome = 'draw';
              } else if (result === 'win') {
                actualOutcome = (name === sorted[0]) ? 'team1' : 'team2';
              } else if (result === 'loss') {
                actualOutcome = (name === sorted[0]) ? 'team2' : 'team1';
              }
              let predictionsAwarded = 0;
              for (const pr of preds) {
                if (pr.prediction === actualOutcome) {
                  // –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞—á–∏—Å–ª—è–µ–º 100 XP
                  const resPred = await addXP(pr.userId, 100, 'prediction');
                  predictionsAwarded += resPred.xpGained;
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞
                  const targetTag = await fetchTagSafe(interaction.client, pr.userId);
                  await checkLevelMilestone(resPred.oldLevel, resPred.newLevel, { id: pr.userId, tag: targetTag }, interaction.guild);
                  // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
                  // –ì–æ—Ç–æ–≤–∏–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–∞ –¥–ª—è –ª–æ–≥–∞
                  let outcomeDesc;
                  if (pr.prediction === 'draw') outcomeDesc = '–Ω–∏—á—å—è';
                  else if (pr.prediction === 'team1') outcomeDesc = `–ø–æ–±–µ–¥–∞ ${sorted[0]}`;
                  else if (pr.prediction === 'team2') outcomeDesc = `–ø–æ–±–µ–¥–∞ ${sorted[1]}`;
                  await logAction('predictionPayout', interaction.guild, {
                    user: { id: pr.userId, tag: targetTag },
                    match: matchKey,
                    prediction: outcomeDesc,
                    xpGained: resPred.xpGained,
                    xpBase: resPred.xpBase
                  });
                }
              }
              // –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –º–∞—Ç—á–∞, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—á–∏—Å–ª—è—Ç—å –¥–≤–∞–∂–¥—ã
              clearPredictionsForMatch(matchKey);
            }
          }
      } catch (e) {
        console.error('[teamresult/prediction]', e?.message || e);
      }

      // ---- –û–±—Ä–∞–±–æ—Ç–∫–∞ Double‚ÄëDown –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ XP ----
      const bets = getBetsForTeam(name);
      // –°–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ DD –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: –ø–æ id —Å—É–º–º–∏—Ä—É–µ–º –∂–µ—Ç–æ–Ω—ã
      const ddMultiplierMap = {};
      for (const bet of bets) {
        const uid = bet.userId;
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∂–µ—Ç–æ–Ω—ã –∫–∞–∫ –º–Ω–æ–∂–∏—Ç–µ–ª—å (1 –∂–µ—Ç–æ–Ω ‚Üí √ó2, 2 –∂–µ—Ç–æ–Ω–∞ ‚Üí √ó3)
        if (team.members && team.members.includes(uid)) {
          const current = ddMultiplierMap[uid] || 1;
          const mult = (bet.tokens || 0) + 1;
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫–∏, —Å—É–º–º–∏—Ä—É–µ–º –∂–µ—Ç–æ–Ω—ã –¥–æ 2
          const existingTokens = current - 1;
          const totalTokens = Math.min(2, (existingTokens) + (bet.tokens || 0));
          ddMultiplierMap[uid] = totalTokens + 1;
        }
      }
      // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ —É—á–∞—Å—Ç–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const baseXP = 200;
      const resultXP = result === 'win' ? 150 : result === 'draw' ? 60 : 0;
      const memberXPList = [];
      let totalXp = 0;
      let affected = 0;
      for (const memberId of (team.members || [])) {
        affected++;
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 (–±–µ–∑ DD)
        const multiplier = ddMultiplierMap[memberId] || 1;
        const resultPortion = resultXP * multiplier;
        const totalForMember = baseXP + resultPortion;
        let gained = 0;
        let base = 0;
        if (totalForMember > 0) {
          const res = await addXP(memberId, totalForMember, 'teamMemberResult');
          gained = res.xpGained;
          base = res.xpBase;
          totalXp += res.xpGained;
          // –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
          await checkLevelMilestone(res.oldLevel, res.newLevel, { id: memberId, tag: String(memberId) }, interaction.guild);
        }
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const u = await getUser(memberId);
        // matchesPlayed –∏ winsInRow –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å—è—Ö, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª—É
        u.matchesPlayed = Number(u.matchesPlayed || 0) + 1;
        if (result === 'win') {
          u.winsInRow = Number(u.winsInRow || 0) + 1;
        } else {
          u.winsInRow = 0;
        }
        // –ì–æ—Ç–æ–≤–∏–º —Ñ–ª–∞–≥–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (!u.achievements || typeof u.achievements !== 'object') {
          u.achievements = { ninePlayed: false, twelvePlayed: false, fourWinsStreak: false };
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ XP
        // 9 —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤ ‚Üí +200 XP (—Ä–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å)
        if (!u.achievements.ninePlayed && u.matchesPlayed >= 9) {
          const resAch = await addXP(memberId, 200, 'achievementNine');
          totalXp += resAch.xpGained;
          u.achievements.ninePlayed = true;
          await checkLevelMilestone(resAch.oldLevel, resAch.newLevel, { id: memberId, tag: String(memberId) }, interaction.guild);
        }
        // 12 —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤ ‚Üí +500 XP (—Ä–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å)
        if (!u.achievements.twelvePlayed && u.matchesPlayed >= 12) {
          const resAch = await addXP(memberId, 500, 'achievementTwelve');
          totalXp += resAch.xpGained;
          u.achievements.twelvePlayed = true;
          await checkLevelMilestone(resAch.oldLevel, resAch.newLevel, { id: memberId, tag: String(memberId) }, interaction.guild);
        }
        // 4 –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥ ‚Üí +200 XP (—Ä–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å)
        if (!u.achievements.fourWinsStreak && u.winsInRow >= 4) {
          const resAch = await addXP(memberId, 200, 'achievementFourWins');
          totalXp += resAch.xpGained;
          u.achievements.fourWinsStreak = true;
          await checkLevelMilestone(resAch.oldLevel, resAch.newLevel, { id: memberId, tag: String(memberId) }, interaction.guild);
        }
        await setUser(memberId, u);
        const tag = await fetchTagSafe(interaction.client, memberId);
        memberXPList.push({ id: memberId, tag, gainedXp: gained, xpBase: base, multiplier });
      }
      // –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ DD-—Å—Ç–∞–≤–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
      clearBetsForTeam(name);
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
      addTeamResult(name, team.members, result);
      // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
      deleteTeam(name);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É —Å—Ç–∞–≤–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è DD). –ù–∞–≥—Ä–∞–¥—ã –∑–∞ DD –æ–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –º–Ω–æ–∂–∏—Ç–µ–ª—å.
      let betsSummary = '';
      if (Object.keys(ddMultiplierMap).length) {
        const items = await Promise.all(Object.entries(ddMultiplierMap).map(async ([uid, mult]) => {
          const tag = await fetchTagSafe(interaction.client, uid);
          const usedTokens = mult - 1;
          return `‚Ä¢ ${tag}: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${usedTokens} –∂–µ—Ç. (–º–Ω–æ–∂–∏—Ç–µ–ª—å √ó${mult})`;
        }));
        betsSummary = items.join('\n');
      }

      await logAction('teamResult', interaction.guild, {
        admin: { id: interaction.user.id, tag: interaction.user.tag },
        name,
        result,
        affected: predictionsCount,
        totalXp,
        membersXPList: memberXPList,
        betsSummary
      });

      return replyPriv(interaction, { content: `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è **${name}**: **${result}**. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: ${predictionsCount}. –ù–∞—á–∏—Å–ª–µ–Ω–æ XP (—Å —É—á—ë—Ç–æ–º –ø—Ä–µ–º–∏—É–º‚Äë–±–æ–Ω—É—Å–æ–≤): ${totalXp}.` });
    }
  },

  bethistory: {
    adminOnly: true,
    async run(interaction) {
      const target = interaction.options.getUser('user', true);
      const events = getBetHistoryForUser(target.id);
      if (!events || events.length === 0) return replyPriv(interaction, { content: `üïë –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@${target.id}> –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞–≤–æ–∫.` });
      const lines = events.slice(-15).map((e) => {
        const date = new Date(e.ts).toLocaleString();
        if (e.type === 'bet') {
          const members = e.members?.map((m) => `<@${m}>`).join(', ') || '';
          return `üü¶ [${date}] –°—Ç–∞–≤–∫–∞: **${e.team}** ‚Äî ${e.tokens} –∂–µ—Ç. –°–æ—Å—Ç–∞–≤: ${members}`;
        } else if (e.type === 'payout') {
          const map = { win: '–ø–æ–±–µ–¥–∞', loss: '–ø–æ—Ä–∞–∂–µ–Ω–∏–µ', draw: '–Ω–∏—á—å—è' };
          return `üü© [${date}] –í—ã–ø–ª–∞—Ç–∞: **${e.team}** (${map[e.result] || e.result}) ‚Äî ${e.tokens} –∂–µ—Ç. ‚áí +${e.xp} XP`;
        }
        return `‚ÑπÔ∏è [${date}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ`;
      });

      const embed = new EmbedBuilder()
        .setColor(0x2b6cb0)
        .setTitle(`–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫ ‚Äî ${target.tag}`)
        .setDescription(lines.join('\n'));
      return replyPriv(interaction, { embeds: [embed] });
    }
  },

  teamhistory: {
    adminOnly: true,
    async run(interaction) {
      const name = interaction.options.getString('name', false);
      const events = getTeamHistory(name);
      if (!events || events.length === 0) {
        if (name) return replyPriv(interaction, { content: `üïë –£ –∫–æ–º–∞–Ω–¥—ã **${name}** –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏.` });
        return replyPriv(interaction, { content: 'üïë –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥.' });
      }
      const lines = events.slice(-20).map((e) => {
        const date = new Date(e.ts).toLocaleString();
        if (e.type === 'create') {
          const members = e.members?.map((m) => `<@${m}>`).join(', ') || '';
          return `üÜï [${date}] –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ **${e.name}**: ${members}`;
        } else if (e.type === 'result') {
          const map = { win: '–ø–æ–±–µ–¥–∞', loss: '–ø–æ—Ä–∞–∂–µ–Ω–∏–µ', draw: '–Ω–∏—á—å—è' };
          const members = e.members?.map((m) => `<@${m}>`).join(', ') || '';
          return `üèÅ [${date}] –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã **${e.name}**: ${map[e.result] || e.result}. –°–æ—Å—Ç–∞–≤: ${members}`;
        }
        return `‚ÑπÔ∏è [${date}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ`;
      });

      const title = name ? `–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥—ã ‚Äî ${name}` : '–ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥';
      const embed = new EmbedBuilder().setColor(0x2b6cb0).setTitle(title).setDescription(lines.join('\n'));
      return replyPriv(interaction, { embeds: [embed] });
    }
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥ (–Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç)
module.exports = {
  code: { run: handlers.code.run },
  usedd: { run: handlers.usedd.run },
  predict: { run: handlers.predict.run },
  bp: { run: handlers.bp.run, adminOnly: false },
  infop: { run: handlers.infop.run, adminOnly: false },

  bpstat: { run: handlers.bpstat.run, adminOnly: true },
  setcode: { run: handlers.setcode.run, adminOnly: true },

  xp: { run: handlers.xp.run, adminOnly: true },
  xpset: { run: handlers.xpset.run, adminOnly: true },
  xpinvite: { run: handlers.xpinvite.run, adminOnly: true },

  gpset: { run: handlers.gpset.run, adminOnly: true },
  ddset: { run: handlers.ddset.run, adminOnly: true },
  invset: { run: handlers.invset.run, adminOnly: true },
  cpset: { run: handlers.cpset.run, adminOnly: true },

  bpreapply: { run: handlers.bpreapply.run, adminOnly: true },
  userreset: { run: handlers.userreset.run, adminOnly: true },
  dbreset:   { run: handlers.dbreset.run,   adminOnly: true },

  // –∫–æ–º–∞–Ω–¥—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  backup:    { run: handlers.backup.run,    adminOnly: true },
  restore:   { run: handlers.restore.run,   adminOnly: true },

  ddstart: { run: handlers.ddstart.run, adminOnly: true },
  ddstop:  { run: handlers.ddstop.run,  adminOnly: true },
  setlog:  { run: handlers.setlog.run,  adminOnly: true },

  teamcreate: { run: handlers.teamcreate.run, adminOnly: true },
  teamchange: { run: handlers.teamchange.run, adminOnly: true },
  teamdelete: { run: handlers.teamdelete.run, adminOnly: true },
  teamresult: { run: handlers.teamresult.run, adminOnly: true },
  bethistory: { run: handlers.bethistory.run, adminOnly: true },
  teamhistory:{ run: handlers.teamhistory.run, adminOnly: true }
  ,
  // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º–∞ –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º‚Äë–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  premiumon:  { run: handlers.premiumon.run,  adminOnly: true },
  premiumoff: { run: handlers.premiumoff.run, adminOnly: true },
  usersprem:  { run: handlers.usersprem.run,  adminOnly: true }
};
