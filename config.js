// config.js (минимальная конфигурация по умолчанию)
function getRewardsForLevel(level, isPremium) {
  const row = REWARDS_MAP[level];
  if (!row) return null;
  return isPremium ? (row.premium || null) : (row.free || null);
}
module.exports = {
  // Настройки боевого пропуска
  battlePass: {
    // Если будут свои картинки для страниц — укажи тут.
    // Можно оставить пустым — код корректно отработает без картинок.
    imageUrls: {
      // Пример, если будут внешние ссылки на изображения:
      // '1-10':  'https://cdn.discordapp.com/attachments/1413853448566210682/1413983446518337668/image.png?ex=68be92f4&is=68bd4174&hm=2dff59ddb0b1acba4c1130799a8794b494e071a6909bc1f5fa0b469065120489&',
      // '11-20': 'https://example.com/bp/11-20.png',
      // ...
      // '91-100': 'https://example.com/bp/91-100.png',
    },

    // Локальные пути к изображениям страниц. Указывайте относительные пути
    // к файлам в вашем проекте (например, assets/bp/1-10.png). Если
    // оставить пустым, будет использован imageUrls либо fallback.
    imagePaths: {
      // пример заполнения:
       '1-10': 'assets/bp/1-10.png',
       '11-20': 'assets/bp/11-20.png',
        '21-30': 'assets/bp/21-30.png',
        '31-40': 'assets/bp/31-40.png',
        '41-50': 'assets/bp/41-50.png',
        '51-60': 'assets/bp/51-60.png',
        '61-70': 'assets/bp/61-70.png',
        '71-80': 'assets/bp/71-80.png',
        '81-90': 'assets/bp/81-90.png',
       '91-100': 'assets/bp/91-100.png'
    },
    progressBars: {
      // Параметры геометрии полос прогресса под новую разметку 1‑10.
      // Новая картинка имеет широкую белую область справа под инфо‑блоки,
      // поэтому горизонтальный диапазон полос уменьшен, а вертикальные смещены
      // ближе к центру строк.
      xPct: 7.65,           // отступ слева, чтобы не перекрывать надпись FREE/PREM
      widthPct: 58.68,     // ширина области полосы (5 ячеек по ~13.5% каждая)
      // Верхняя полоса (уровни 1–5) располагается в верхнем сером ряду
      top:    { yPct: 6.5, heightPct: 42.7 },
      // Нижняя полоса (уровни 6–10) располагается в нижнем сером ряду
      bottom: { yPct: 54.1, heightPct: 42.7 }
    },

    // Цвета для каждой из четырёх половинок полосы прогресса. 
    // Начиная с версии, в которой полосы разделены на бесплатную (free) и премиальную (premium) части,
    // можно задать собственные цвета для каждой половинки. Цвет задаётся как объект { r, g, b, a }.
    // Пара «top» описывает верхнюю строку уровней (1–5), «bottom» — нижнюю (6–10). 
    // Внутри каждой пары можно указать цвета для free и premium половинок. Если цвет не указан, 
    // будет использован общий цвет из переменных BP_BAR_R/G/B/ALPHA либо дефолт.
    progressBarColors: {
      top: {
        free:  { r: 14, g: 121, b: 169, a: 150 },
        premium: { r: 64, g: 128, b: 255, a: 150 }
      },
      bottom: {
        free: { r: 14, g: 121, b: 169, a: 150 }  ,
        premium: { r: 64, g: 128, b: 255, a: 150 }
      }
    },


    rewardsCompact: {
      free: {
        cardPacks:    { "1\\6\\11\\16\\21\\26\\31\\36\\41\\46\\51\\56\\61\\66\\71\\76\\81\\86\\91\\96": 1, 
          "100": 5,
          "50": 3,
        },
        doubleTokens: { "18\\38\\68\\88\\98": 1, 
        
        },
        rafflePoints: { "3\\13\\23\\33\\43\\53\\63\\73\\83\\93": 1 }
      },
      premium: {
        cardPacks: {
          "10\\20\\30\\40\\60\\70\\80\\90": 3,
          "2\\3\\5\\7\\9\\12\\13\\15\\17\\19\\22\\23\\25\\27\\29\\32\\33\\35\\37\\39\\42\\43\\45\\47\\49\\52\\53\\55\\57\\59\\62\\63\\65\\67\\69\\72\\73\\75\\77\\79\\82\\83\\85\\87\\89\\92\\93\\95\\97\\99": 1
        },
        doubleTokens: { "8\\18\\28\\38\\48\\58\\68\\78\\88": 1 },
        rafflePoints: { "4\\14\\24\\34\\44\\54\\64\\74\\84\\94": 1 }
      }
    },
   

    // Развёрнутый список наград. Не заполняйте вручную — будет автоматически
    // сгенерирован на основе rewardsCompact при загрузке конфига.
    rewards: null,

    // Порог XP на каждый уровень (1..100). Если оставить пустым,
    // логика сама упадёт на шаг 100 XP за уровень.
    xpThresholds: []
  },

  // Глобальный список пользователей, которым доступны все команды вне зависимости от ролей или прав. 
  // Заполняется идентификаторами Discord. Пользователи из этого списка проходят проверку в isWhitelisted().
  adminUsers: [
    "311247030422863882", // фрокенг
    "656899242593484823"  //самолёт
  ],

  // Контрольные уровни (для логов достижений)
  xp: {
    // Контрольные уровни, при достижении которых логируется событие `milestone`.
    // Пользователь с премиум‑статусом вызывает уведомление админа (см. xpUtils.js).
    milestones: [50, 98, 100]
  }
  ,

  /**
   * Награды для участников команд в зависимости от результата игры. При
   * выставлении результата через команду `/teamresult` каждому участнику
   * команды (не зависимо от того, делал ли он ставку) будут начислены
   * указанные здесь награды. Значения задаются в виде объекта, где ключ
   * соответствует результату (`win`, `draw` или `loss`), а значения —
   * сколько выдать каждой награды. Администратор может свободно менять
   * эти числа под свои нужды. Все поля необязательны — если какой-то
   * вид награды не нужен, просто оставьте его нулевым или удалите.
   *
   * Доступные типы наград:
   *  - xp          — количество XP (очки опыта Battle Pass), которое
   *                 будет начислено через функцию addXP (учитывая
   *                 премиум‑множитель и выдачу наград за уровни).
   *  - doubleTokens — количество Double‑Down жетонов.
   *  - rafflePoints — количество очков розыгрыша.
   *  - invites     — количество инвайтов.
   *  - cardPacks   — количество паков карт.
   */
  teamRewards: {
    win: {
      xp: 0,
      doubleTokens: 0,
      rafflePoints: 0,
      invites: 0,
      cardPacks: 0
    },
    draw: {
      xp: 0,
      doubleTokens: 0,
      rafflePoints: 0,
      invites: 0,
      cardPacks: 0
    },
    loss: {
      xp: 0,
      doubleTokens: 0,
      rafflePoints: 0,
      invites: 0,
      cardPacks: 0
    }
  }
};

// ===== Разворачивание compact-наград в подробный вид =====

/**
 * Преобразует компактную схему наград в детальную. Результат имеет вид
 * { free: { lvl: [ {type, amount}, ... ] }, premium: { ... } }.
 * На одном уровне может быть несколько наград, поэтому значения собираются
 * в массив. Уровни сортируются по возрастанию для удобства.
 *
 * @param {Object} compact Исходная схема rewardsCompact
 */
function expandRewards(compact) {
  const out = { free: {}, premium: {} };
  for (const lane of ["free", "premium"]) {
    const laneDef = (compact && compact[lane]) || {};
    for (const rewardType of Object.keys(laneDef)) {
      const mapping = laneDef[rewardType] || {};
      for (const levelsStr of Object.keys(mapping)) {
        const amt = Number(mapping[levelsStr]);
        if (!amt || isNaN(amt) || amt <= 0) continue;
        // Разделяем уровни по слешу или запятой
        const levels = String(levelsStr)
          .split(/[\\,]/g)
          .map(s => s.trim())
          .filter(Boolean)
          .map(s => Number(s))
          .filter(n => Number.isFinite(n) && n > 0);
        for (const lvl of levels) {
          if (!out[lane][lvl]) out[lane][lvl] = [];
          out[lane][lvl].push({ type: rewardType, amount: amt });
        }
      }
    }
    // сортировка уровней
    const sorted = {};
    Object.keys(out[lane])
      .map(n => Number(n))
      .sort((a, b) => a - b)
      .forEach(k => {
        sorted[k] = out[lane][k];
      });
    out[lane] = sorted;
  }
  return out;
}

// Попытка развернуть compact-награды при загрузке модуля. Если что-то
// пойдёт не так, оставляем пустой набор наград.
try {
  const cfg = module.exports;
  if (cfg.battlePass) {
    cfg.battlePass.rewards = expandRewards(cfg.battlePass.rewardsCompact);
  }
} catch (err) {
  const cfg = module.exports;
  if (cfg.battlePass) cfg.battlePass.rewards = { free: {}, premium: {} };
}
