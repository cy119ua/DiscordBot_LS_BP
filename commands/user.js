const { getUser, setUser, calculateLevel, calculateXPProgress, addXP } = require('../database/userManager');
const { getPromoCode, isCodeExpired, hasUserUsedPromo, markPromoCodeUsed } = require('../database/promoManager');
const { logAction } = require('../utils/logger');
const { EmbedBuilder } = require('discord.js');
const { getSettings } = require('../database/settingsManager');
const { isWhitelisted } = require('../utils/permissions');

const userCommands = {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (whitelist/admin)
  checkperms: {
    name: 'checkperms',
    description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–∞–≤–∞',
    async execute(message) {
      const allowed = await isWhitelisted(message.member);
      const embed = new EmbedBuilder()
        .setColor(allowed ? 0x00ff99 : 0xff5555)
        .setTitle('Permissions')
        .setDescription(allowed ? '‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/whitelist' : '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω-–ø—Ä–∞–≤ / –≤—ã –Ω–µ –≤ whitelist')
        .setTimestamp();
      return message.reply({ embeds: [embed] });
    }
  },

  // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  profile: {
    name: 'profile',
    description: '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (—É—Ä–æ–≤–µ–Ω—å, –ø—Ä–æ–≥—Ä–µ—Å—Å, —Å—Ç–∞—Ç—É—Å—ã)',
    async execute(message) {
      const userId = message.author.id;
      const u = await getUser(userId);
      const level = calculateLevel(u.xp || 0);
      const progress = calculateXPProgress(u.xp || 0);

      const embed = new EmbedBuilder()
        .setColor(u.premium ? 0xffd700 : 0x0099ff)
        .setTitle(`${message.author.username} ‚Äî –ø—Ä–æ—Ñ–∏–ª—å`)
        .setThumbnail(message.author.displayAvatarURL())
        .addFields(
          { name: '–£—Ä–æ–≤–µ–Ω—å', value: String(level), inline: true },
          { name: '–ü—Ä–æ–≥—Ä–µ—Å—Å XP', value: progress.progress, inline: true },
          { name: '–í—Å–µ–≥–æ XP', value: String(u.xp || 0), inline: true },
          { name: '–ü—Ä–µ–º–∏—É–º', value: u.premium ? '‚≠ê Premium' : 'üÜì Free', inline: true },
          { name: 'DD-–∂–µ—Ç–æ–Ω—ã', value: String(u.doubleTokens || 0), inline: true },
          { name: '–û—á–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞', value: String(u.rafflePoints || 0), inline: true },
          { name: '–ò–Ω–≤–∞–π—Ç—ã', value: String(u.invites || 0), inline: true }
        )
        .setTimestamp();

      return message.reply({ embeds: [embed] });
    }
  },

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
  code: {
    name: 'code',
    description: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥: !code ABC123',
    async execute(message, args) {
      if (!args[0]) return message.reply('‚ùå –£–∫–∞–∂–∏ –∫–æ–¥: `!code ABC123`');
      const code = String(args[0]).toUpperCase();

      const promo = await getPromoCode(code);
      if (!promo) return message.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'); // –ø–æ –¢–ó

      const userId = message.author.id;
      if (await hasUserUsedPromo(code, userId)) {
        return message.reply('‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥');
      }
      if (isCodeExpired(promo)) {
        return message.reply('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'); // –ø–æ –¢–ó
      }

      const before = await getUser(userId);
      const oldLevel = calculateLevel(before.xp || 0);

      let gained = 0;
      if (promo.rewards && Number.isFinite(promo.rewards.xp)) {
        const res = await addXP(userId, promo.rewards.xp, 'promo'); // –ø—Ä–∏–º–µ–Ω–∏—Ç –ø—Ä–µ–º–∏—É–º +10%
        gained = res.xpGained || 0;
      }

      await markPromoCodeUsed(code, userId);

      const after = await getUser(userId);
      const newLevel = calculateLevel(after.xp || (before.xp + gained));

      await logAction('promo', message.guild, {
        user: { id: message.author.id, tag: message.author.tag },
        code, gainedXp: gained, oldLevel, newLevel
      });

      return message.reply(`‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç: +${gained} XP`);
    }
  },

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Double-Down –∂–µ—Ç–æ–Ω–æ–≤
  usedd: {
    name: 'usedd',
    description: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å 1 –∏–ª–∏ 2 –∂–µ—Ç–æ–Ω–∞ Double-Down',
    async execute(message, args) {
      if (!message.guild) return message.reply('‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.');

      const raw = (args?.[0] || '').trim();
      const amount = Number.parseInt(raw, 10);
      if (![1, 2].includes(amount)) return message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!usedd 1` –∏–ª–∏ `!usedd 2`');

      const s = await getSettings(message.guild.id);
      if (!s.ddEnabled) return message.reply('‚ùå Double-Down —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');

      const userId = message.author.id;
      const u = await getUser(userId);
      const before = Number(u.doubleTokens || 0);
      if (before < amount) return message.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∂–µ—Ç–æ–Ω–æ–≤ (–µ—Å—Ç—å: ${before}, –Ω—É–∂–Ω–æ: ${amount}).`);

      const after = before - amount;
      u.doubleTokens = after;
      await setUser(userId, u);

      const multiplier = amount === 2 ? 3 : 2;

      await logAction('doubleStake', message.guild, {
        user: { id: message.author.id, tag: message.author.tag },
        amount, multiplier, beforeTokens: before, afterTokens: after
      });

      return message.reply(`‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: **x${multiplier}**. –°–ø–∏—Å–∞–Ω–æ ${amount} –∂–µ—Ç–æ–Ω(–∞). –û—Å—Ç–∞–ª–æ—Å—å: ${after}.`);
    }
  }
};

module.exports = userCommands;
