const { addXP, getUser, setUser } = require('../database/userManager');
const { createPromoCode, deletePromoCode } = require('../database/promoManager');
const { setDoubleStake, getDoubleStake } = require('../database/globalManager');
const { logAction, findOrCreateLogChannel } = require('../utils/logger');
const { checkLevelMilestone } = require('../utils/xpUtils');
const { EmbedBuilder } = require('discord.js');

const adminCommands = {
    xp: {
        name: 'xp',
        description: 'Add XP to a user',
        adminOnly: true,
        async execute(message, args, client) {
            if (args.length < 2) {
                return message.reply('‚ùå Usage: `!xp <@user> <amount>`');
            }
            const { isWhitelisted } = require('../utils/permissions');
if (!await isWhitelisted(message.member)) {
  return message.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (whitelist)');
}

            const userMention = args[0];
            const amount = parseInt(args[1]);
            
            if (isNaN(amount) || amount <= 0) {
                return message.reply('‚ùå Please provide a valid XP amount.');
            }
            
            // Extract user ID from mention
            const userId = userMention.replace(/[<@!>]/g, '');
            const targetUser = await client.users.fetch(userId).catch(() => null);
            
            if (!targetUser) {
                return message.reply('‚ùå User not found.');
            }
            
            try {
                const result = await addXP(userId, amount, 'manual_admin');
                
                // Check for level milestone
                await checkLevelMilestone(result.oldLevel, result.newLevel, targetUser, message.guild);
                
                // Log the action
                await logAction('xpAdd', message.guild, {
                    admin: message.author,
                    target: targetUser,
                    amount: result.xpGained,
                    oldLevel: result.oldLevel,
                    newLevel: result.newLevel
                });
                
                const embed = new EmbedBuilder()
                    .setColor(0x00ff00)
                    .setTitle('‚úÖ XP Added')
                    .setDescription(`Added **${result.xpGained} XP** to ${targetUser}`)
                    .addFields(
                        { name: 'Level Progress', value: `${result.oldLevel} ‚Üí ${result.newLevel}`, inline: true },
                        { name: 'Total XP', value: result.totalXP.toString(), inline: true }
                    )
                    .setTimestamp();
                
                message.reply({ embeds: [embed] });
            } catch (error) {
                console.error('XP add error:', error);
                message.reply('‚ùå There was an error adding XP.');
            }
        }
    },
    
    xpinvite: {
        name: 'xpinvite',
        description: '–î–æ–±–∞–≤–∏—Ç—å 100 XP –∏ +1 invite –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å –ø—Ä–µ–º–∏—É–º-–º–Ω–æ–∂–∏—Ç–µ–ª–µ–º)',
        adminOnly: true,
        async execute(message, args) {
        // !xpinvite @user   (–±–µ–∑ –≤—Ç–æ—Ä–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é +100)
         const { addXP, getUser, setUser } = require('../database/userManager');

const { isWhitelisted } = require('../utils/permissions');
if (!await isWhitelisted(message.member)) {
  return message.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (whitelist)');
}

         if (!args[0]) return message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!xpinvite @user`');
         const userId = args[0].replace(/[<@!>]/g, '');

        const base = 100; // –ø–æ –¢–ó ‚Äî —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 100
        const res = await addXP(userId, base, 'invite'); // –≤–Ω—É—Ç—Ä–∏ addXP –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è premium +10%

            // +1 –∫ —Å—á—ë—Ç—á–∏–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        const u = await getUser(userId);
        u.invites = (u.invites || 0) + 1;
        await setUser(userId, u);
        return message.reply(`‚úÖ <@${userId}> –ø–æ–ª—É—á–∏–ª +${res.xpGained} XP –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–∏—Ç–æ–≥–æ: ${u.xp}) –∏ +1 invite.`);
    }
},

    
    xpset: {
        name: 'xpset',
        description: 'Set user XP to specific amount',
        adminOnly: true,
        async execute(message, args, client) {
            if (args.length < 2) {
                return message.reply('‚ùå Usage: `!xpset <@user> <amount>`');
            }

            const { isWhitelisted } = require('../utils/permissions');
if (!await isWhitelisted(message.member)) {
  return message.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (whitelist)');
}

            const userMention = args[0];
            const amount = parseInt(args[1]);
            
            if (isNaN(amount) || amount < 0) {
                return message.reply('‚ùå Please provide a valid XP amount.');
            }
            
            const userId = userMention.replace(/[<@!>]/g, '');
            const targetUser = await client.users.fetch(userId).catch(() => null);
            
            if (!targetUser) {
                return message.reply('‚ùå User not found.');
            }
            
            try {
                const userData = await getUser(userId);
                const oldXP = userData.xp;
                const oldLevel = require('../database/userManager').calculateLevel(oldXP);
                
                userData.xp = amount;
                await setUser(userId, userData);
                
                const newLevel = require('../database/userManager').calculateLevel(amount);
                
                // Check for level milestone
                await checkLevelMilestone(oldLevel, newLevel, targetUser, message.guild);
                
                const embed = new EmbedBuilder()
                    .setColor(0xff9900)
                    .setTitle('‚úÖ XP Set')
                    .setDescription(`Set ${targetUser}'s XP to **${amount}**`)
                    .addFields(
                        { name: 'Previous XP', value: oldXP.toString(), inline: true },
                        { name: 'Level Progress', value: `${oldLevel} ‚Üí ${newLevel}`, inline: true }
                    )
                    .setTimestamp();
                
                message.reply({ embeds: [embed] });
            } catch (error) {
                console.error('XP set error:', error);
                message.reply('‚ùå There was an error setting XP.');
            }
        }
    },
    
    gpset: {
    name: 'gpset',
    description: 'Set raffle points for a user',
      adminOnly: true,
      async execute(message, args, client) {
        const { isWhitelisted } = require('../utils/permissions');
if (!await isWhitelisted(message.member)) {
  return message.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (whitelist)');
}

        if (args.length < 2) return message.reply('‚ùå Usage: `!gpset <@user> <points>`');
        const userId = args[0].replace(/[<@!>]/g, '');
        const points = parseInt(args[1]);
        if (isNaN(points) || points < 0) return message.reply('‚ùå Invalid points');
        const userData = await getUser(userId);
        userData.rafflePoints = points;
        await setUser(userId, userData);
        return message.reply(`‚úÖ Raffle points set to **${points}** for <@${userId}>`);
    }
},

    ddset: {
        name: 'ddset', adminOnly: true, description: 'Set user DD tokens',
        async execute(message, args) {
            const { isWhitelisted } = require('../utils/permissions');
if (!await isWhitelisted(message.member)) {
  return message.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (whitelist)');
}

            if (args.length < 2) return message.reply('‚ùå Usage: `!ddset <@user> <amount>`');
            const userId = args[0].replace(/[<@!>]/g, '');
            const amount = parseInt(args[1]);
            if (isNaN(amount) || amount < 0) return message.reply('‚ùå Invalid amount');
            const userData = await getUser(userId);
            userData.doubleTokens = amount;
            await setUser(userId, userData);
            await logAction('doubleStake', message.guild, { admin: message.author, enabled: true, amount, target: { toString:()=>`<@${userId}>` }});
            return message.reply(`‚úÖ Set **${amount}** DD tokens for <@${userId}>`);
        }
    },

    ddstart: {
  name: 'ddstart',
  description: '–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ Double-Down –¥–ª—è –≤—Å–µ—Ö',
  adminOnly: true,
  async execute(message) {
    const { isWhitelisted } = require('../utils/permissions');
if (!await isWhitelisted(message.member)) {
  return message.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (whitelist)');
}

    const { patchSettings } = require('../database/settingsManager');
    const { logAction } = require('../utils/logger');
    await patchSettings(message.guild.id, { ddEnabled: true });
    await logAction('doubleStakeWindow', message.guild, { admin: message.author, enabled: true });
    return message.reply('‚úÖ –û–∫–Ω–æ Double-Down –æ—Ç–∫—Ä—ã—Ç–æ');
  }
},

ddstop: {
  name: 'ddstop',
  description: '–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ Double-Down –¥–ª—è –≤—Å–µ—Ö',
  adminOnly: true,
  async execute(message) {
    const { isWhitelisted } = require('../utils/permissions');
if (!await isWhitelisted(message.member)) {
  return message.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (whitelist)');
}

    const { patchSettings } = require('../database/settingsManager');
    const { logAction } = require('../utils/logger');
    await patchSettings(message.guild.id, { ddEnabled: false });
    await logAction('doubleStakeWindow', message.guild, { admin: message.author, enabled: false });
    return message.reply('üõë –û–∫–Ω–æ Double-Down –∑–∞–∫—Ä—ã—Ç–æ');
  }
},
    
    bpstat: {
        name: 'bpstat',
        description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–ü –¥–ª—è @user (–∏–ª–∏ —Å–µ–±—è, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)',
        adminOnly: true,
        async execute(message, args) {
            const { isWhitelisted } = require('../utils/permissions');
if (!await isWhitelisted(message.member)) {
  return message.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (whitelist)');
}

            const { EmbedBuilder } = require('discord.js');
            const { getUser, calculateLevel, calculateXPProgress } = require('../database/userManager');
            const userId = args[0]?.replace(/[<@!>]/g, '') || message.author.id;
            const u = await getUser(userId);
            const lvl = calculateLevel(u.xp || 0);
            const prog = calculateXPProgress(u.xp || 0); // –æ–∂–∏–¥–∞–µ—Ç—Å—è { current, next, progress: "xx%" }
            const embed = new EmbedBuilder()
            .setColor(0x9932cc)
            .setTitle('üìä Battle Pass ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            .addFields(
        { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: `<@${userId}>`, inline: true },
        { name: '–£—Ä–æ–≤–µ–Ω—å', value: String(lvl), inline: true },
        { name: 'XP', value: `${u.xp || 0} (${prog.progress})`, inline: true },
        { name: 'DD-–∂–µ—Ç–æ–Ω—ã', value: String(u.doubleTokens || 0), inline: true },
        { name: '–û—á–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞', value: String(u.rafflePoints || 0), inline: true },
        { name: '–ò–Ω–≤–∞–π—Ç—ã', value: String(u.invites || 0), inline: true },
        { name: '–ü—Ä–µ–º–∏—É–º', value: u.premium ? '‚≠ê –ê–∫—Ç–∏–≤–µ–Ω' : 'üÜì –ù–µ—Ç', inline: true }
      )
      .setTimestamp();
      return message.reply({ embeds: [embed] });
    }
},

    
    setcode: {
        name: 'setcode',
        description: '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥: !setcode CODE TTL_MIN XP [MAX_USES]',
        adminOnly: true,
        async execute(message, args) {
            const { isWhitelisted } = require('../utils/permissions');
if (!await isWhitelisted(message.member)) {
  return message.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (whitelist)');
}

            const { createPromoCode } = require('../database/promoManager');

            if (args.length < 3) {
                return message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!setcode CODE TTL_MIN XP [MAX_USES]`');
            }
            const [raw, ttlStr, xpStr, maxStr] = args;
            const code = String(raw).toUpperCase();
            const ttlMin = parseInt(ttlStr, 10);
            const xp = parseInt(xpStr, 10);
            const maxUses = maxStr ? parseInt(maxStr, 10) : 0;
            if (!Number.isFinite(ttlMin) || ttlMin < 0 || !Number.isFinite(xp) || xp < 0) {
                return message.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –ü—Ä–∏–º–µ—Ä: `!setcode 1234 60 100 15`');
            }
            const expiresAt = ttlMin ? new Date(Date.now() + ttlMin * 60_000) : null;
            await createPromoCode(code, { xp }, expiresAt, maxUses);
            return message.reply(`‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ **${code}**: +${xp} XP, TTL ${ttlMin} –º–∏–Ω, –ª–∏–º–∏—Ç ${maxUses || '‚àû'}`);
        }
    },

    premiumon: {
        name: 'premiumon',
        description: '–í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
        adminOnly: true,
        async execute(message, args) {
            const { isWhitelisted } = require('../utils/permissions');
if (!await isWhitelisted(message.member)) {
  return message.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (whitelist)');
}

            const { getUser, setUser } = require('../database/userManager');
            if (!args[0]) return message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!premiumon @user`');
            const userId = args[0].replace(/[<@!>]/g, '');
            const u = await getUser(userId);
            u.premium = true;
            u.premium_since = new Date().toISOString(); // –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è, –µ—Å–ª–∏ –±—É–¥–µ—à—å —É—á–∏—Ç—ã–≤–∞—Ç—å –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏
            await setUser(userId, u);
            return message.reply(`‚úÖ –ü—Ä–µ–º–∏—É–º –≤–∫–ª—é—á—ë–Ω –¥–ª—è <@${userId}>`);
        }
    },
    premiumoff: {
        name: 'premiumoff',
        description: '–í—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
        adminOnly: true,
        async execute(message, args) {
            const { isWhitelisted } = require('../utils/permissions');
if (!await isWhitelisted(message.member)) {
  return message.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (whitelist)');
}

            const { getUser, setUser } = require('../database/userManager');
            if (!args[0]) return message.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!premiumoff @user`');
            const userId = args[0].replace(/[<@!>]/g, '');
            const u = await getUser(userId);
            u.premium = false;
            await setUser(userId, u);
            return message.reply(`‚úÖ –ü—Ä–µ–º–∏—É–º –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è <@${userId}>`);
        }
    },
    setlog: {
  name: 'setlog',
  description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤: !setlog #channel',
  adminOnly: true,
  async execute(message, args) {
    const { isWhitelisted } = require('../utils/permissions');
if (!await isWhitelisted(message.member)) {
  return message.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (whitelist)');
}

    const { patchSettings } = require('../database/settingsManager');
    const ch = message.mentions.channels.first();
    if (!ch) return message.reply('‚ùå –£–∫–∞–∂–∏ –∫–∞–Ω–∞–ª: `!setlog #–∫–∞–Ω–∞–ª`');
    await patchSettings(message.guild.id, { logChannelId: ch.id });
    return message.reply(`‚úÖ –õ–æ–≥-–∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <#${ch.id}>`);
  }
},
wluadd: { // add user to whitelist
  name: 'wluadd',
  description: '–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ whitelist: !wluadd @user',
  adminOnly: true,
  async execute(message, args) {
    const { patchSettings, getSettings } = require('../database/settingsManager');
    const user = message.mentions.users.first();
    if (!user) return message.reply('‚ùå –£–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `!wluadd @user`');
    const s = await getSettings(message.guild.id);
    const next = Array.from(new Set([...(s.whitelistUsers || []), user.id]));
    await patchSettings(message.guild.id, { whitelistUsers: next });
    return message.reply(`‚úÖ <@${user.id}> –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist`);
  }
},

wludel: { // remove user
  name: 'wludel',
  description: '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ whitelist: !wludel @user',
  adminOnly: true,
  async execute(message, args) {
    const { patchSettings, getSettings } = require('../database/settingsManager');
    const user = message.mentions.users.first();
    if (!user) return message.reply('‚ùå –£–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `!wludel @user`');
    const s = await getSettings(message.guild.id);
    const next = (s.whitelistUsers || []).filter(id => id !== user.id);
    await patchSettings(message.guild.id, { whitelistUsers: next });
    return message.reply(`‚ôªÔ∏è <@${user.id}> —É–¥–∞–ª—ë–Ω –∏–∑ whitelist`);
  }
},

wlradd: { // add role
  name: 'wlradd',
  description: '–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –≤ whitelist: !wlradd @role',
  adminOnly: true,
  async execute(message) {
    const { patchSettings, getSettings } = require('../database/settingsManager');
    const role = message.mentions.roles.first();
    if (!role) return message.reply('‚ùå –£–∫–∞–∂–∏ —Ä–æ–ª—å: `!wlradd @role`');
    const s = await getSettings(message.guild.id);
    const next = Array.from(new Set([...(s.whitelistRoles || []), role.id]));
    await patchSettings(message.guild.id, { whitelistRoles: next });
    return message.reply(`‚úÖ <@&${role.id}> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ whitelist`);
  }
},

wlrdel: { // remove role
  name: 'wlrdel',
  description: '–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∏–∑ whitelist: !wlrdel @role',
  adminOnly: true,
  async execute(message) {
    const { patchSettings, getSettings } = require('../database/settingsManager');
    const role = message.mentions.roles.first();
    if (!role) return message.reply('‚ùå –£–∫–∞–∂–∏ —Ä–æ–ª—å: `!wlrdel @role`');
    const s = await getSettings(message.guild.id);
    const next = (s.whitelistRoles || []).filter(id => id !== role.id);
    await patchSettings(message.guild.id, { whitelistRoles: next });
    return message.reply(`‚ôªÔ∏è <@&${role.id}> —É–¥–∞–ª–µ–Ω–∞ –∏–∑ whitelist`);
  }
},


};

module.exports = adminCommands;
