require('dotenv').config();

const { Client, GatewayIntentBits, Events, PermissionFlagsBits } = require('discord.js');
// –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–ª–∞–Ω–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
// –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.  –§—É–Ω–∫—Ü–∏—è scheduleDailyBackup() –±—É–¥–µ—Ç
// –≤—ã–∑–≤–∞–Ω–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
const { scheduleDailyBackup } = require('./utils/backupManager');
const config = require('./config'); // –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ adminUsers
// –ó–∞–º–µ–Ω—è–µ–º @replit/database –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
// utils/db.js –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å Client, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø–æ API, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π
// –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª db.json –≤ –ø–∞–ø–∫–µ data. –≠—Ç–æ —É–ø—Ä–æ—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ Replit.
const { Client: DBClient } = require('./utils/db');

// === –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –î–û –ª—é–±—ã—Ö require –º–æ–¥—É–ª–µ–π ===
const db = new DBClient();
global.db = db;

// –ü—Ä–∞–≤–∞ (whitelist ‚Üí —Ñ–æ–ª–±—ç–∫ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
const { isWhitelisted } = require('./utils/permissions');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è slash
const slashHandlers = require('./slash/handlers');
const battlepass = require('./commands/battlepass'); // –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,         // slash-–∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
    GatewayIntentBits.GuildMessages,  // –ª–æ–≥‚Äë–∫–∞–Ω–∞–ª—ã
    GatewayIntentBits.GuildMembers    // –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
  ],
});

/**
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏ –¥–ª—è whitelisted‚Äë–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã–¥–∞—ë—Ç –µ—ë. –†–æ–ª—å
 * –∏–º–µ–µ—Ç —Ñ–ª–∞–≥ Administrator, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç whitelisted‚Äë–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–∏–¥–µ—Ç—å
 * —Å–∫—Ä—ã—Ç—ã–µ slash‚Äë–∫–æ–º–∞–Ω–¥—ã (—Å default_member_permissions: '0'). –°–∞–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
 * –¥–æ—Å—Ç—É–ø–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ isWhitelisted(), –ø–æ—ç—Ç–æ–º—É –¥—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
 * —Å–µ—Ä–≤–µ—Ä–∞ —Å–º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –Ω–æ –Ω–µ —Å–º–æ–≥—É—Ç –∏—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç—å.
 *
 * @param {import('discord.js').Guild} guild
 */
async function ensureWhitelistAdminRole(guild) {
  const roleName = 'LSBP Admin (auto)';
  const me = guild.members.me;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –±–æ—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏
  if (!me.permissions.has(PermissionFlagsBits.ManageRoles)) {
    throw new Error('Bot lacks Manage Roles permission');
  }
  // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª—å
  let role = guild.roles.cache.find((r) => r.name === roleName);
  if (!role) {
    // –°–æ–∑–¥–∞—ë–º —Ä–æ–ª—å —Å –ø—Ä–∞–≤–æ–º Administrator, –µ—Å–ª–∏ —É –±–æ—Ç–∞ —ç—Ç–æ –ø—Ä–∞–≤–æ –µ—Å—Ç—å
    const perms = me.permissions.has(PermissionFlagsBits.Administrator)
      ? [PermissionFlagsBits.Administrator]
      : [];
    role = await guild.roles.create({
      name: roleName,
      permissions: perms,
      reason: 'Role for whitelisted admins',
    });
  } else {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ —Ä–æ–ª–∏: –¥–æ–±–∞–≤–ª—è–µ–º Administrator, –µ—Å–ª–∏ –±–æ—Ç –µ–≥–æ –∏–º–µ–µ—Ç
    if (
      me.permissions.has(PermissionFlagsBits.Administrator) &&
      !role.permissions.has(PermissionFlagsBits.Administrator)
    ) {
      await role.setPermissions([PermissionFlagsBits.Administrator]);
    }
  }
  // –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º —Ä–æ–ª—å –ø—Ä—è–º–æ –ø–æ–¥ —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª—å—é –±–æ—Ç–∞
  const topBotRole = me.roles.highest;
  if (topBotRole && role.position >= topBotRole.position) {
    await role.setPosition(topBotRole.position - 1);
  }
  // –í—ã–¥–∞—ë–º —Ä–æ–ª—å –≤—Å–µ–º whitelisted‚Äë–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  const ids = Array.isArray(config.adminUsers) ? config.adminUsers : [];
  for (const id of ids) {
    const member = await guild.members.fetch(id).catch(() => null);
    if (!member) continue;
    // –ë–æ—Ç –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –≤—ã—Å—à–∞—è —Ä–æ–ª—å –Ω–∏–∂–µ —Ä–æ–ª–∏ –±–æ—Ç–∞
    const canManage = me.roles.highest.comparePositionTo(member.roles.highest) > 0;
    if (canManage && !member.roles.cache.has(role.id)) {
      await member.roles.add(role, 'Grant whitelisted admin role');
    }
  }
  // –£–±–∏—Ä–∞–µ–º —Ä–æ–ª—å —É —Ç–µ—Ö, –∫—Ç–æ –≤—ã—à–µ–ª –∏–∑ whitelist
  for (const [, member] of role.members) {
    if (!ids.includes(member.id)) {
      const canManage = me.roles.highest.comparePositionTo(member.roles.highest) > 0;
      if (canManage) {
        await member.roles.remove(role, 'Remove whitelisted admin role');
      }
    }
  }
}

client.once(Events.ClientReady, async () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}`);
  console.log('‚úÖ Slash commands:', Object.keys(slashHandlers).join(', ') || '(none)');
  /*
   * –†–∞–Ω–µ–µ –±–æ—Ç —Å–æ–∑–¥–∞–≤–∞–ª –∏ –≤—ã–¥–∞–≤–∞–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ä–æ–ª—å —Å –ø—Ä–∞–≤–æ–º Administrator –¥–ª—è
   * –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ whitelist, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –≤–∏–¥–µ—Ç—å —Å–∫—Ä—ã—Ç—ã–µ slash‚Äë–∫–æ–º–∞–Ω–¥—ã.
   * –ü–æ –Ω–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –Ω–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—è–º–∏ Discord –∏–ª–∏ –≤—ã–¥–∞–≤–∞—Ç—å –ø—Ä–∞–≤–∞
   * –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ—ç—Ç–æ–º—É —Ä–æ–ª—å –±–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è.
   *
   * –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω—ã –≤—Å–µ–º (—Å–º. register.js),
   * –∞ —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ isWhitelisted().
   */

  // –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤.  –û—Ç—á—ë—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö –±—É–¥—É—Ç
  // –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å.  –ë—ç–∫–∞–ø—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  // `data/backups` –∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
  try {
    setInterval(backupDb, 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞
  } catch (e) {
    console.error('[index] Failed to schedule daily backups:', e);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–π: slash + –∫–Ω–æ–ø–∫–∏
client.on(Events.InteractionCreate, async (interaction) => {
  // –ö–Ω–æ–ø–∫–∞ "—Ç–æ–ø-20" ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø 20 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ XP
  if (interaction.isButton() && interaction.customId === 'top_20_xp') {
    const db = global.db;
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = Object.values(await db.all())
      .filter(u => u.id && typeof u.xp === 'number')
      .sort((a, b) => b.xp - a.xp)
      .slice(0, 20);
    let text = users.map((u, i) => `${i+1}. <@${u.id}> ‚Äî ${u.xp} XP`).join('\n');
    await interaction.reply({ content: `üèÜ –¢–æ–ø 20 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ XP:\n${text}`, ephemeral: true });
    return;
  }
  try {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ (StringSelectMenu) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
        if (interaction.isStringSelectMenu()) {
      const customId = interaction.customId;
      // –§–æ—Ä–º–∞ customId: usedd_team_select:<userId>:<tokens>
      if (customId.startsWith('usedd_team_select:')) {
        const parts = customId.split(':');
        const userId = parts[1];
        const tokensStr = parts[2];
        const tokens = Number(tokensStr);
        const selectedTeam = interaction.values[0];

        // –¢–æ–ª—å–∫–æ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä
        if (interaction.user.id !== userId) {
          return interaction.reply({ content: '‚ùå –≠—Ç–æ –º–µ–Ω—é –Ω–µ –¥–ª—è –≤–∞—Å.', ephemeral: true });
        }

        try {
          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤
          const { getSettings } = require('./database/settingsManager');
          const { getTeam, getAllTeams } = require('./utils/teamManager');
          const { getUser, setUser } = require('./database/userManager');
          const { addBet } = require('./utils/betManager');
          const { addBetHistory } = require('./utils/historyManager');
          const { logAction } = require('./utils/logger');

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –æ–∫–Ω–æ DD
          const settings = await getSettings(interaction.guild.id);
          if (!settings.ddEnabled) {
            return interaction.update({ content: '‚ùå Double-Down —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.', components: [] });
          }
          const windowId = settings.ddWindowId || 0;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
          const team = getTeam(selectedTeam);
          if (!team) {
            const names = Object.keys(getAllTeams());
            const available = names.length ? names.map((n) => `**${n}**`).join(', ') : '–Ω–µ—Ç';
            return interaction.update({ content: `‚ùå –ö–æ–º–∞–Ω–¥–∞ **${selectedTeam}** –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${available}.`, components: [] });
          }

          // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const userRecord = await getUser(userId);
          const balance = Number(userRecord.doubleTokens || 0);
          if (balance < tokens) {
            return interaction.update({ content: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∂–µ—Ç–æ–Ω–æ–≤: –µ—Å—Ç—å ${balance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è ${tokens}.`, components: [] });
          }

          // –°–±—Ä–æ—Å –æ–∫–Ω–∞, –µ—Å–ª–∏ ID –∏–∑–º–µ–Ω–∏–ª—Å—è
          if (!userRecord.ddWindow || userRecord.ddWindow.id !== windowId) {
            userRecord.ddWindow = { id: windowId, usedTokens: 0, betTeam: null };
          }

          // –õ–∏–º–∏—Ç 2 –∂–µ—Ç–æ–Ω–∞ –∑–∞ –æ–∫–Ω–æ (–æ–¥–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ 2 –∂–µ—Ç–æ–Ω–∞ –∏–ª–∏ –¥–≤–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ 1)
          const used = Number(userRecord.ddWindow.usedTokens || 0);
          if (used + tokens > 2) {
            const remain = Math.max(0, 2 - used);
            return interaction.update({ content: `‚ùå –õ–∏–º–∏—Ç –∂–µ—Ç–æ–Ω–æ–≤ –Ω–∞ –æ–∫–Ω–æ ‚Äî 2. –î–æ—Å—Ç—É–ø–Ω–æ: ${remain}.`, components: [] });
          }

          // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
          if (userRecord.ddWindow.betTeam && userRecord.ddWindow.betTeam !== selectedTeam) {
            return interaction.update({ content: `‚ùå –í —ç—Ç–æ–º –æ–∫–Ω–µ —É–∂–µ –±—ã–ª–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ **${userRecord.ddWindow.betTeam}**. –°—Ç–∞–≤–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É.`, components: [] });
          }

          // –°–ø–∏—Å—ã–≤–∞–µ–º –∂–µ—Ç–æ–Ω—ã –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
          const before = balance;
          userRecord.doubleTokens = before - tokens;
          userRecord.ddWindow.usedTokens = used + tokens;
          if (!userRecord.ddWindow.betTeam) userRecord.ddWindow.betTeam = selectedTeam;
          await setUser(userId, userRecord);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –∏ –∏—Å—Ç–æ—Ä–∏—é
          await addBet(userId, selectedTeam, tokens);
          addBetHistory({ type: 'bet', userId, team: selectedTeam, tokens, members: team.members, xp: 0 });

          // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
          await logAction('doubleStake', interaction.guild, {
            user: { id: userId, tag: interaction.user.tag },
            tokens,
            team: selectedTeam,
            beforeTokens: before,
            afterTokens: userRecord.doubleTokens,
            windowId,
            usedInWindow: userRecord.ddWindow.usedTokens
          });

          // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          return interaction.update({
            content: `‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ **${selectedTeam}**: ${tokens} –∂–µ—Ç–æ–Ω(–∞). –û—Å—Ç–∞–ª–æ—Å—å –∂–µ—Ç–æ–Ω–æ–≤: ${userRecord.doubleTokens}. (–û–∫–Ω–æ #${windowId}: ${userRecord.ddWindow.usedTokens}/2)`,
            components: []
          });
        } catch (e) {
          console.error('usedd select error:', e);
          return interaction.update({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã.', components: [] });
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç—á–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
      if (customId.startsWith('predict_match_select:')) {
        // customId: predict_match_select:<userId>
        const parts = customId.split(':');
        const userId = parts[1];
        const selectedMatch = interaction.values[0];
        // –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–∑–≤–∞–≤—à–∏–π –º–µ–Ω—é, –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        if (interaction.user.id !== userId) {
          return interaction.reply({ content: '‚ùå –≠—Ç–æ –º–µ–Ω—é –Ω–µ –¥–ª—è –≤–∞—Å.',
                                     ephemeral: true });
        }
        try {
          const { getSettings } = require('./database/settingsManager');
          const { getTeam } = require('./utils/teamManager');
          const { getPredictionsForUser } = require('./utils/predictionManager');
          const settings = await getSettings(interaction.guild.id);
          if (!settings.ddEnabled) {
            return interaction.update({ content: '‚ùå –ü—Ä–æ–≥–Ω–æ–∑—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', components: [] });
          }
          // –†–∞–∑–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ç—á
          const [team1, team2] = selectedMatch.split('_');
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞ Double‚ÄëDown
        const ddWindowId = settings.ddWindowId || 0;
        // –°–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø—Ä–æ–≥–Ω–æ–∑ –≤ —ç—Ç–æ–º –æ–∫–Ω–µ
        const userPreds = getPredictionsForUser(String(userId));
        if (userPreds.find((p) => p.ddWindowId === ddWindowId)) {
          return interaction.update({ content: '‚ùå –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –≤ —ç—Ç–æ–º –æ–∫–Ω–µ Double-Down. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ /ddstart.', components: [] });
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –¥–µ–ª–∞–ª –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á
        const existing = userPreds.find((p) => p.matchKey === selectedMatch);
        if (existing) {
          return interaction.update({ content: '‚ùå –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á.', components: [] });
        }
          // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–±–µ –∫–æ–º–∞–Ω–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
          const t1 = getTeam(team1);
          const t2 = getTeam(team2);
          if (!t1 || !t2) {
            return interaction.update({ content: '‚ùå –û–¥–Ω–∞ –∏–ª–∏ –æ–±–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', components: [] });
          }
          // –°—Ç—Ä–æ–∏–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–∞
          const { StringSelectMenuBuilder, ActionRowBuilder } = require('discord.js');
          const resultSelect = new StringSelectMenuBuilder()
            .setCustomId(`predict_result_select:${userId}:${selectedMatch}`)
            .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥ –º–∞—Ç—á–∞')
            .addOptions([
              { label: `–ü–æ–±–µ–¥–∞ ${team1}`, value: 'team1' },
              { label: '–ù–∏—á—å—è', value: 'draw' },
              { label: `–ü–æ–±–µ–¥–∞ ${team2}`, value: 'team2' }
            ]);
          const resultRow = new ActionRowBuilder().addComponents(resultSelect);
          return interaction.update({ content: `–ú–∞—Ç—á **${team1}** vs **${team2}**. –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:`, components: [resultRow] });
        } catch (e) {
          console.error('predict match select error:', e);
          return interaction.update({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞.', components: [] });
        }
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
      if (customId.startsWith('predict_result_select:')) {
        // customId: predict_result_select:<userId>:<matchKey>
        const parts = customId.split(':');
        const userId = parts[1];
        // matchKey –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª '_', –ø–æ—ç—Ç–æ–º—É –±–µ—Ä–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å
        const matchKey = parts.slice(2).join(':');
        const resultVal = interaction.values[0];
        if (interaction.user.id !== userId) {
          return interaction.reply({ content: '‚ùå –≠—Ç–æ –º–µ–Ω—é –Ω–µ –¥–ª—è –≤–∞—Å.',
                                     ephemeral: true });
        }
        try {
          const { getSettings } = require('./database/settingsManager');
          const { getTeam } = require('./utils/teamManager');
          const { addPrediction, getPredictionsForUser } = require('./utils/predictionManager');
          const { logAction } = require('./utils/logger');
          const settings = await getSettings(interaction.guild.id);
          if (!settings.ddEnabled) {
            return interaction.update({ content: '‚ùå –ü—Ä–æ–≥–Ω–æ–∑—ã —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', components: [] });
          }
          const [team1, team2] = matchKey.split('_');
          const t1 = getTeam(team1);
          const t2 = getTeam(team2);
          if (!t1 || !t2) {
            return interaction.update({ content: '‚ùå –û–¥–Ω–∞ –∏–ª–∏ –æ–±–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', components: [] });
          }
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞ Double‚ÄëDown
        const ddWindowId = settings.ddWindowId || 0;
        // –°–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø—Ä–æ–≥–Ω–æ–∑ –≤ —ç—Ç–æ–º –æ–∫–Ω–µ
        const userPreds = getPredictionsForUser(String(userId));
        if (userPreds.find((p) => p.ddWindowId === ddWindowId)) {
          return interaction.update({ content: '‚ùå –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –≤ —ç—Ç–æ–º –æ–∫–Ω–µ Double-Down. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ /ddstart.', components: [] });
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
        const existing = userPreds.find((p) => p.matchKey === matchKey);
        if (existing) {
          return interaction.update({ content: '‚ùå –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á.', components: [] });
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Å —É—á—ë—Ç–æ–º –Ω–æ–º–µ—Ä–∞ –æ–∫–Ω–∞ Double‚ÄëDown
        addPrediction(userId, matchKey, resultVal, ddWindowId);
          // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
          await logAction('predictionAdd', interaction.guild, {
            user: { id: userId, tag: interaction.user.tag },
            match: matchKey,
            teams: [team1, team2],
            prediction: resultVal
          });
          // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–∞
          const outcomeDesc = resultVal === 'team1'
            ? `–ø–æ–±–µ–¥–∞ ${team1}`
            : resultVal === 'team2'
              ? `–ø–æ–±–µ–¥–∞ ${team2}`
              : '–Ω–∏—á—å—è';
          return interaction.update({ content: `‚úÖ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–Ω—è—Ç: –º–∞—Ç—á **${team1}** vs **${team2}**, –∏—Å—Ö–æ–¥ **${outcomeDesc}**.`, components: [] });
        } catch (e) {
          console.error('predict result select error:', e);
          return interaction.update({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞.', components: [] });
        }
      }
      // –¥—Ä—É–≥–∏–µ select-–º–µ–Ω—é ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    }


    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∏–ø–∞ STRING
    if (interaction.isAutocomplete()) {
      try {
        const focused = interaction.options.getFocused(true);
        if (!focused) return;
        const optionName = focused.name;
        if (optionName === 'team' || optionName === 'name') {
          const { getAllTeams } = require('./utils/teamManager');
          const teams = getAllTeams();
          const names = Object.keys(teams).slice(0, 25);
          return interaction.respond(names.map((n) => ({ name: n, value: n })));
        }
        // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã (–ø–∞—Ä–∞–º–µ—Ç—Ä 'old' –≤ /teamchange).
        if (optionName === 'old') {
          try {
            // –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –ø–∞—Ä–∞–º–µ—Ç—Ä 'name' —É–∂–µ –±—ã–ª –≤–≤–µ–¥—ë–Ω.
            const teamName = interaction.options.getString('name');
            if (!teamName) return interaction.respond([]);
            const { getTeam } = require('./utils/teamManager');
            const team = getTeam(teamName);
            if (!team || !Array.isArray(team.members)) return interaction.respond([]);
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –æ—Ç–æ–±—Ä–∞–∂–∞—è –Ω–∏–∫ –∏–ª–∏ —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.  –í
            // –∑–Ω–∞—á–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–∏–Ω–≥ (`<@id>`), —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            // –≤–∏–¥–µ–ª –ø—Ä–∏–≤—ã—á–Ω—ã–π –Ω–∏–∫ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–æ–≤–æ–≥–æ ID. –í —Ö–µ–Ω–¥–ª–µ—Ä–µ –∫–æ–º–∞–Ω–¥—ã ID –±—É–¥–µ—Ç
            // –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏.
            const memberIds = team.members.slice(0, 25).map((uid) => String(uid));
            const suggestions = [];
            for (const uid of memberIds) {
              let display = uid;
              try {
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ; –µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫—ç—à–µ,
                // –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å –∫ API Discord. –ï—Å–ª–∏ –Ω–∏–∫–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–≥.
                const member = await interaction.guild.members.fetch(uid);
                if (member) {
                  display = member.displayName || (member.user && member.user.tag) || uid;
                }
              } catch (fetchErr) {
                try {
                  const user = await interaction.client.users.fetch(uid);
                  display = user.tag || uid;
                } catch {
                  display = uid;
                }
              }
              // –§–æ—Ä–º–∏—Ä—É–µ–º mention, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –ø—Ä–∏–≤—ã—á–Ω—ã–π –Ω–∏–∫ –≤–º–µ—Å—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ ID
              const mention = `<@${uid}>`;
              suggestions.push({ name: display, value: mention });
            }
            return interaction.respond(suggestions);
          } catch (err) {
            console.error('autocomplete old error:', err);
            return interaction.respond([]);
          }
        }
      } catch (e) {
        console.error('autocomplete error:', e);
      }
      return;
    }

    // –ö–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –ë–ü
    if (interaction.isButton() && interaction.customId.startsWith('bp_page_')) {
      return battlepass.onButton(interaction, client);
    }

    // Slash-–∫–æ–º–∞–Ω–¥—ã
    if (!interaction.isChatInputCommand()) return;

    const handler = slashHandlers[interaction.commandName];
    if (!handler) return;

    /*
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –∞–¥–º–∏–Ω‚Äë–∫–æ–º–∞–Ω–¥.
     *
     * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ `adminOnly` –≤ —Ñ–∞–π–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è,
     * –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ (—Ä–æ–ª—å
     * –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, whitelisted ID –∏ —Ç. –¥.). –†–∞–Ω–µ–µ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å
     * `adminOnly` —Ç—Ä–µ–±–æ–≤–∞–ª–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–ª–æ –∫ —Ç–æ–º—É, —á—Ç–æ
     * –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –≤–∏–¥–µ–ª–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö —Å–ª—ç—à‚Äë–∫–æ–º–∞–Ω–¥. –¢–µ–ø–µ—Ä—å
     * –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º
     * –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–∫–∞–∑–∞–Ω `adminOnly`.
     */
    const publiclyAccessibleCommands = ['bp', 'code', 'usedd'];
    const requiresAdmin = handler.adminOnly && !publiclyAccessibleCommands.includes(interaction.commandName);

    if (requiresAdmin) {
      const allowed = await isWhitelisted(interaction.user);
      if (!allowed) {
        return interaction.reply({ content: '‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.', ephemeral: true });
      }
    }

    await handler.run(interaction, client);
  } catch (e) {
    console.error('Interaction error:', e);
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.', ephemeral: true });
    }
  }
});

const token = process.env.DISCORD_TOKEN;
if (!token) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DISCORD_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ .env');
  process.exit(1);
}
client.login(token).catch((e) => {
  console.error('‚ùå Login error:', e);
  process.exit(1);
});
