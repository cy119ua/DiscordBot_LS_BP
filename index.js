// index.js ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ —Ü–µ–ª–∏–∫–æ–º

require('dotenv').config();

const { Client, GatewayIntentBits, Collection, Events } = require('discord.js');
const Database = require('@replit/database');
const config = require('./config');

// –ü—Ä–∞–≤–∞: —Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å whitelist, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ–ª–±—ç–∫ –Ω–∞ isAdmin
const permissions = require('./utils/permissions');
const isAllowed = async (member) => {
  if (permissions && typeof permissions.isWhitelisted === 'function') {
    return permissions.isWhitelisted(member);
  }
  if (permissions && typeof permissions.isAdmin === 'function') {
    return permissions.isAdmin(member);
  }
  // –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ ¬´–∞–¥–º–∏–Ω¬ª
  return member?.permissions?.has?.('Administrator') || false;
};

// –ú–æ–¥—É–ª–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ (–º–æ–≥—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –≤–µ—â–∏ –≤—Ä–æ–¥–µ onButton)
const battlepassModule = require('./commands/battlepass');
const adminModule = require('./commands/admin');
const userModule = require('./commands/user');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Discord –∫–ª–∏–µ–Ω—Ç–∞
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ]
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (Replit)
const db = new Database();
global.db = db;

// –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤, –≥–¥–µ –µ—Å—Ç—å execute (–∏ –∏–º—è)
function collectCommands(...modules) {
  const map = new Collection();
  for (const mod of modules) {
    for (const [exportName, value] of Object.entries(mod)) {
      if (value && typeof value.execute === 'function') {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –∫–æ–º–∞–Ω–¥—ã
        const name =
          (typeof value.name === 'string' && value.name) ||
          (typeof exportName === 'string' && exportName) ||
          null;
        if (name) {
          map.set(name.toLowerCase(), value);
        }
      }
    }
  }
  return map;
}

const commands = collectCommands(battlepassModule, adminModule, userModule);

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å
console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã:', [...commands.keys()].join(', ') || '(–ø—É—Å—Ç–æ)');

// –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞
client.once(Events.ClientReady, async () => {
  console.log(`‚úÖ Discord bot logged in as ${client.user.tag}`);
  console.log('üîó Bot is ready and connected to Discord!');

  // –ï—Å–ª–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–∞—Å—å –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–∫–∏—Ö-—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ –ë–î ‚Äî –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—å.
  // –ü—Ä–∏–º–µ—Ä –Ω–∏–∂–µ –±–æ–ª—å—à–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ settingsManager (ddEnabled —Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞ –≥–∏–ª—å–¥–∏—é).
  try {
    const globalData = (await db.get('global')) || {};
    if (typeof globalData.doubleStake === 'undefined') {
      globalData.doubleStake = false;
      await db.set('global', globalData);
    }
    console.log('üìä Database initialized successfully');
  } catch (error) {
    console.error('‚ùå Database initialization error:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å-–∫–æ–º–∞–Ω–¥
client.on(Events.MessageCreate, async (message) => {
  try {
    if (message.author.bot) return;
    if (!message.content.startsWith(config.prefix)) return;

    const args = message.content.slice(config.prefix.length).trim().split(/\s+/);
    const commandName = (args.shift() || '').toLowerCase();
    const command = commands.get(commandName);
    if (!command) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è adminOnly
    if (command.adminOnly) {
      const ok = await isAllowed(message.member);
      if (!ok) {
        return message.reply('‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (whitelist/admin).');
      }
    }

    await command.execute(message, args, client);
  } catch (error) {
    console.error('Command execution error:', error);
    if (message && message.reply) {
      message.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (interactionCreate)
client.on(Events.InteractionCreate, async (interaction) => {
  try {
    if (interaction.isButton()) {
      // –ö–Ω–æ–ø–∫–∏ –ë–æ–µ–≤–æ–≥–æ –ü—Ä–æ–ø—É—Å–∫–∞
      if (interaction.customId.startsWith('bp_page_')) {
        const { onButton } = require('./commands/battlepass');
        return onButton(interaction, client);
      }
      // ... –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤ –±—É–¥—É—â–µ–º
    }
  } catch (error) {
    console.error('Button interaction error:', error);
    if (!interaction.replied && !interaction.deferred) {
      await interaction.reply({
        content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.',
        ephemeral: true
      });
    }
  }
});

// –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
client.on('error', (error) => {
  console.error('Discord client error:', error);
});

process.on('unhandledRejection', (reason) => {
  console.error('Unhandled promise rejection:', reason);
});

// –õ–æ–≥–∏–Ω
const token = process.env.DISCORD_TOKEN;
if (!token) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DISCORD_TOKEN –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
  process.exit(1);
}

client.login(token).catch((error) => {
  console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Discord:', error);
  process.exit(1);
});
